/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "string.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

ETH_TxPacketConfig TxConfig;
ETH_DMADescTypeDef  DMARxDscrTab[ETH_RX_DESC_CNT]; /* Ethernet Rx DMA Descriptors */
ETH_DMADescTypeDef  DMATxDscrTab[ETH_TX_DESC_CNT]; /* Ethernet Tx DMA Descriptors */

ETH_HandleTypeDef heth;

UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */

// Vector de LEDs
GPIO_TypeDef* LED_PORTS[] = {GPIOB, GPIOB, GPIOB};
uint16_t LED_PINS[] = {GPIO_PIN_0, GPIO_PIN_7, GPIO_PIN_14};
int num_leds = 3;
int current_led = 0;
/*Código agregado (app1.2)*/
int direction = 1; // 1 para adelante, -1 para atrás
uint8_t button_state = 0;
uint8_t last_button_state = 0;
int sequence = 0; // Secuencia actual (0 a 3)

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ETH_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Secuencia1() {
    for (int i = 0; i < num_leds; i++) {
        HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_SET);
        HAL_Delay(150);
        HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_RESET);
        HAL_Delay(150);
    }
}

void Secuencia2() {
    for (int i = 0; i < 3; i++) {
        HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_SET);
    }
    HAL_Delay(300);
    for (int i = 0; i < 3; i++) {
        HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_RESET);
    }
    HAL_Delay(300);
}

void Secuencia3() {
    HAL_GPIO_WritePin(LED_PORTS[0], LED_PINS[0], GPIO_PIN_SET);
    HAL_Delay(100);
    HAL_GPIO_WritePin(LED_PORTS[0], LED_PINS[0], GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_PORTS[1], LED_PINS[1], GPIO_PIN_SET);
    HAL_Delay(300);
    HAL_GPIO_WritePin(LED_PORTS[1], LED_PINS[1], GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_PORTS[2], LED_PINS[2], GPIO_PIN_SET);
    HAL_Delay(600);
    HAL_GPIO_WritePin(LED_PORTS[2], LED_PINS[2], GPIO_PIN_RESET);
}

void Secuencia4() {
    HAL_GPIO_WritePin(LED_PORTS[0], LED_PINS[0], GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED_PORTS[2], LED_PINS[2], GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED_PORTS[1], LED_PINS[1], GPIO_PIN_RESET);
    HAL_Delay(150);
    HAL_GPIO_WritePin(LED_PORTS[0], LED_PINS[0], GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_PORTS[2], LED_PINS[2], GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_PORTS[1], LED_PINS[1], GPIO_PIN_SET);
    HAL_Delay(150);
    HAL_GPIO_WritePin(LED_PORTS[1], LED_PINS[1], GPIO_PIN_RESET);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ETH_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Leer el estado del pulsador
      button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);

      // Detectar el flanco de subida (cambio de estado de 0 a 1)
      if (button_state == GPIO_PIN_SET && last_button_state == GPIO_PIN_RESET)
      {
    	  sequence = (sequence + 1) % 4; // Cambiar a la siguiente secuencia
      }

      last_button_state = button_state; // Actualizar el estado del pulsador

      // Ejecutar la secuencia actual
      switch (sequence) {
          case 0:
              Secuencia1();
              break;
          case 1:
              Secuencia2();
              break;
          case 2:
              Secuencia3();
              break;
          case 3:
              Secuencia4();
              break;
          default:
              break;
      }
  }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ETH Initialization Function
  * @
