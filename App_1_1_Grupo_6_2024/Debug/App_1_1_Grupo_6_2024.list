
App_1_1_Grupo_6_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f40  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030ec  080030ec  000040ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800310c  0800310c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800310c  0800310c  0000410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003114  08003114  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003114  08003114  00004114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003118  08003118  00004118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800311c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000077c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000788  20000788  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e25a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dfc  00000000  00000000  00013296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  00015098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bd  00000000  00000000  00015bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f08  00000000  00000000  000164ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4b9  00000000  00000000  0003a3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9e3e  00000000  00000000  0004786e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001216ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fa4  00000000  00000000  001216f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00124694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080030d4 	.word	0x080030d4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080030d4 	.word	0x080030d4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fbf7 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f83b 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 fb4b 	bl	8000b84 <MX_GPIO_Init>
  MX_ETH_Init();
 80004ee:	f000 f8a1 	bl	8000634 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004f2:	f000 f8ed 	bl	80006d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f6:	f000 f915 	bl	8000724 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

    uint16_t LED[] ={LD1,LD2,LD3};
 80004fa:	4a18      	ldr	r2, [pc, #96]	@ (800055c <main+0x80>)
 80004fc:	463b      	mov	r3, r7
 80004fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000502:	6018      	str	r0, [r3, #0]
 8000504:	3304      	adds	r3, #4
 8000506:	8019      	strh	r1, [r3, #0]
    int num_leds =3;
 8000508:	2303      	movs	r3, #3
 800050a:	60bb      	str	r3, [r7, #8]
    int current_led=0;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
       LED_On(LED[current_led]);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	3310      	adds	r3, #16
 8000516:	443b      	add	r3, r7
 8000518:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fb84 	bl	8000c2c <LED_On>
       HAL_Delay(200);
 8000524:	20c8      	movs	r0, #200	@ 0xc8
 8000526:	f000 fc47 	bl	8000db8 <HAL_Delay>

       LED_Off(LED[current_led]);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	3310      	adds	r3, #16
 8000530:	443b      	add	r3, r7
 8000532:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fba1 	bl	8000c80 <LED_Off>
       HAL_Delay(200);
 800053e:	20c8      	movs	r0, #200	@ 0xc8
 8000540:	f000 fc3a 	bl	8000db8 <HAL_Delay>
       current_led =(current_led +1)% num_leds;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3301      	adds	r3, #1
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	fb93 f2f2 	sdiv	r2, r3, r2
 800054e:	68b9      	ldr	r1, [r7, #8]
 8000550:	fb01 f202 	mul.w	r2, r1, r2
 8000554:	1a9b      	subs	r3, r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
       LED_On(LED[current_led]);
 8000558:	bf00      	nop
 800055a:	e7d9      	b.n	8000510 <main+0x34>
 800055c:	080030ec 	.word	0x080030ec

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fd83 	bl	800307a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	@ (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	@ (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	@ (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d4:	23a8      	movs	r3, #168	@ 0xa8
 80005d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 faed 	bl	8001bc4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f8c6 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fd4e 	bl	80020b4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f8af 	bl	8000780 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	@ 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <MX_ETH_Init+0x84>)
 800063a:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <MX_ETH_Init+0x88>)
 800063c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_ETH_Init+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000644:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_ETH_Init+0x8c>)
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_ETH_Init+0x8c>)
 800064c:	22e1      	movs	r2, #225	@ 0xe1
 800064e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_ETH_Init+0x8c>)
 8000652:	2200      	movs	r2, #0
 8000654:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_ETH_Init+0x8c>)
 8000658:	2200      	movs	r2, #0
 800065a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_ETH_Init+0x8c>)
 800065e:	2200      	movs	r2, #0
 8000660:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <MX_ETH_Init+0x84>)
 8000664:	4a16      	ldr	r2, [pc, #88]	@ (80006c0 <MX_ETH_Init+0x8c>)
 8000666:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <MX_ETH_Init+0x84>)
 800066a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800066e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_ETH_Init+0x84>)
 8000672:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <MX_ETH_Init+0x90>)
 8000674:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_ETH_Init+0x84>)
 8000678:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_ETH_Init+0x94>)
 800067a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_ETH_Init+0x84>)
 800067e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000682:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <MX_ETH_Init+0x84>)
 8000686:	f000 fca1 	bl	8000fcc <HAL_ETH_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000690:	f000 f876 	bl	8000780 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000694:	2238      	movs	r2, #56	@ 0x38
 8000696:	2100      	movs	r1, #0
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <MX_ETH_Init+0x98>)
 800069a:	f002 fcee 	bl	800307a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_ETH_Init+0x98>)
 80006a0:	2221      	movs	r2, #33	@ 0x21
 80006a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_ETH_Init+0x98>)
 80006a6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80006aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <MX_ETH_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200001a0 	.word	0x200001a0
 80006bc:	40028000 	.word	0x40028000
 80006c0:	2000077c 	.word	0x2000077c
 80006c4:	20000100 	.word	0x20000100
 80006c8:	20000060 	.word	0x20000060
 80006cc:	20000028 	.word	0x20000028

080006d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <MX_USART3_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_USART3_UART_Init+0x4c>)
 8000708:	f001 fef4 	bl	80024f4 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f835 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000250 	.word	0x20000250
 8000720:	40004800 	.word	0x40004800

08000724 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800072e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	2204      	movs	r2, #4
 8000734:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000738:	2202      	movs	r2, #2
 800073a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000744:	2202      	movs	r2, #2
 8000746:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2201      	movs	r2, #1
 800074c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2201      	movs	r2, #1
 800075e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	f001 f91d 	bl	80019a6 <HAL_PCD_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f805 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000298 	.word	0x20000298

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	@ 0x38
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a55      	ldr	r2, [pc, #340]	@ (8000950 <HAL_ETH_MspInit+0x174>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	f040 80a4 	bne.w	8000948 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
 8000804:	4b53      	ldr	r3, [pc, #332]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000808:	4a52      	ldr	r2, [pc, #328]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 800080a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800080e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000810:	4b50      	ldr	r3, [pc, #320]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000818:	623b      	str	r3, [r7, #32]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
 8000820:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000824:	4a4b      	ldr	r2, [pc, #300]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000826:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800082a:	6313      	str	r3, [r2, #48]	@ 0x30
 800082c:	4b49      	ldr	r3, [pc, #292]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000830:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	4b45      	ldr	r3, [pc, #276]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000840:	4a44      	ldr	r2, [pc, #272]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000842:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000846:	6313      	str	r3, [r2, #48]	@ 0x30
 8000848:	4b42      	ldr	r3, [pc, #264]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000850:	61bb      	str	r3, [r7, #24]
 8000852:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	4b3e      	ldr	r3, [pc, #248]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085c:	4a3d      	ldr	r2, [pc, #244]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6313      	str	r3, [r2, #48]	@ 0x30
 8000864:	4b3b      	ldr	r3, [pc, #236]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	4b37      	ldr	r3, [pc, #220]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000878:	4a36      	ldr	r2, [pc, #216]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000880:	4b34      	ldr	r3, [pc, #208]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000894:	4a2f      	ldr	r2, [pc, #188]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 8000896:	f043 0302 	orr.w	r3, r3, #2
 800089a:	6313      	str	r3, [r2, #48]	@ 0x30
 800089c:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a0:	f003 0302 	and.w	r3, r3, #2
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b0:	4a28      	ldr	r2, [pc, #160]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 80008b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b8:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <HAL_ETH_MspInit+0x178>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008c4:	2332      	movs	r3, #50	@ 0x32
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d4:	230b      	movs	r3, #11
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	481e      	ldr	r0, [pc, #120]	@ (8000958 <HAL_ETH_MspInit+0x17c>)
 80008e0:	f000 fe9c 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008e4:	2386      	movs	r3, #134	@ 0x86
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f4:	230b      	movs	r3, #11
 80008f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	4817      	ldr	r0, [pc, #92]	@ (800095c <HAL_ETH_MspInit+0x180>)
 8000900:	f000 fe8c 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000916:	230b      	movs	r3, #11
 8000918:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	480f      	ldr	r0, [pc, #60]	@ (8000960 <HAL_ETH_MspInit+0x184>)
 8000922:	f000 fe7b 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000926:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000938:	230b      	movs	r3, #11
 800093a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	4808      	ldr	r0, [pc, #32]	@ (8000964 <HAL_ETH_MspInit+0x188>)
 8000944:	f000 fe6a 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000948:	bf00      	nop
 800094a:	3738      	adds	r7, #56	@ 0x38
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40028000 	.word	0x40028000
 8000954:	40023800 	.word	0x40023800
 8000958:	40020800 	.word	0x40020800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400
 8000964:	40021800 	.word	0x40021800

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12c      	bne.n	80009e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000998:	6413      	str	r3, [r2, #64]	@ 0x40
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d4:	2307      	movs	r3, #7
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <HAL_UART_MspInit+0x8c>)
 80009e0:	f000 fe1c 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	@ 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40004800 	.word	0x40004800
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a18:	d13f      	bne.n	8000a9a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <HAL_PCD_MspInit+0xac>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a20      	ldr	r2, [pc, #128]	@ (8000aa4 <HAL_PCD_MspInit+0xac>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <HAL_PCD_MspInit+0xac>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a36:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a48:	230a      	movs	r3, #10
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4815      	ldr	r0, [pc, #84]	@ (8000aa8 <HAL_PCD_MspInit+0xb0>)
 8000a54:	f000 fde2 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480e      	ldr	r0, [pc, #56]	@ (8000aa8 <HAL_PCD_MspInit+0xb0>)
 8000a6e:	f000 fdd5 	bl	800161c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_PCD_MspInit+0xac>)
 8000a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <HAL_PCD_MspInit+0xac>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a7c:	6353      	str	r3, [r2, #52]	@ 0x34
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_PCD_MspInit+0xac>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_PCD_MspInit+0xac>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <HAL_PCD_MspInit+0xac>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b02:	f000 f939 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b34:	f7ff ffea 	bl	8000b0c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	@ (8000b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f002 fa95 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fcbb 	bl	80004dc <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b74:	0800311c 	.word	0x0800311c
  ldr r2, =_sbss
 8000b78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b7c:	20000788 	.word	0x20000788

08000b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>
	...

08000b84 <MX_GPIO_Init>:
/**
 *  @brief GPIO Initialization Function
 *  @param None
 *  @retval None
 */
void MX_GPIO_Init(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Habilita el reloj para el puerto del botón (PC13)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <MX_GPIO_Init+0x9c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c20 <MX_GPIO_Init+0x9c>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_GPIO_Init+0x9c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Habilita el reloj para el puerto de los LEDs (PB0, PB7, PB14)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_GPIO_Init+0x9c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a18      	ldr	r2, [pc, #96]	@ (8000c20 <MX_GPIO_Init+0x9c>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_GPIO_Init+0x9c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

    /* Configure GPIO pin Output Level for LEDs */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bd8:	4812      	ldr	r0, [pc, #72]	@ (8000c24 <MX_GPIO_Init+0xa0>)
 8000bda:	f000 fecb 	bl	8001974 <HAL_GPIO_WritePin>

    /* Configure GPIO pin : USER_Btn_Pin (PC13) */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000be8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_GPIO_Init+0xa4>)
 8000bf6:	f000 fd11 	bl	800161c <HAL_GPIO_Init>

    /* Configure GPIO pins : LD1 (PB0), LD2 (PB7), LD3 (PB14) */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14;
 8000bfa:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000bfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_GPIO_Init+0xa0>)
 8000c14:	f000 fd02 	bl	800161c <HAL_GPIO_Init>
}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40020800 	.word	0x40020800

08000c2c <LED_On>:
/**
 *  @brief Turn LED On
 *  @param led: Specify which LED (LD1, LD2, LD3) to turn ON
 *  @retval None
 */
void LED_On(led_T led) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
    switch(led) {
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d012      	beq.n	8000c62 <LED_On+0x36>
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	dc17      	bgt.n	8000c70 <LED_On+0x44>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <LED_On+0x1e>
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d006      	beq.n	8000c56 <LED_On+0x2a>
            break;
        case LD3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LED_ON);  // PB14: LED 3 (red)
            break;
        default:
            break;
 8000c48:	e012      	b.n	8000c70 <LED_On+0x44>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, LED_ON);   // PB0: LED 1 (green)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <LED_On+0x50>)
 8000c50:	f000 fe90 	bl	8001974 <HAL_GPIO_WritePin>
            break;
 8000c54:	e00d      	b.n	8000c72 <LED_On+0x46>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, LED_ON);   // PB7: LED 2 (blue)
 8000c56:	2201      	movs	r2, #1
 8000c58:	2180      	movs	r1, #128	@ 0x80
 8000c5a:	4808      	ldr	r0, [pc, #32]	@ (8000c7c <LED_On+0x50>)
 8000c5c:	f000 fe8a 	bl	8001974 <HAL_GPIO_WritePin>
            break;
 8000c60:	e007      	b.n	8000c72 <LED_On+0x46>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LED_ON);  // PB14: LED 3 (red)
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <LED_On+0x50>)
 8000c6a:	f000 fe83 	bl	8001974 <HAL_GPIO_WritePin>
            break;
 8000c6e:	e000      	b.n	8000c72 <LED_On+0x46>
            break;
 8000c70:	bf00      	nop
    }
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020400 	.word	0x40020400

08000c80 <LED_Off>:
/**
 *  @brief Turn LED Off
 *  @param led: Specify which LED (LD1, LD2, LD3) to turn OFF
 *  @retval None
 */
void LED_Off(led_T led) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    switch(led) {
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d012      	beq.n	8000cb6 <LED_Off+0x36>
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	dc17      	bgt.n	8000cc4 <LED_Off+0x44>
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <LED_Off+0x1e>
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d006      	beq.n	8000caa <LED_Off+0x2a>
            break;
        case LD3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LED_OFF);  // PB14: LED 3 (red)
            break;
        default:
            break;
 8000c9c:	e012      	b.n	8000cc4 <LED_Off+0x44>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, LED_OFF);   // PB0: LED 1 (green)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <LED_Off+0x50>)
 8000ca4:	f000 fe66 	bl	8001974 <HAL_GPIO_WritePin>
            break;
 8000ca8:	e00d      	b.n	8000cc6 <LED_Off+0x46>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, LED_OFF);   // PB7: LED 2 (blue)
 8000caa:	2200      	movs	r2, #0
 8000cac:	2180      	movs	r1, #128	@ 0x80
 8000cae:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <LED_Off+0x50>)
 8000cb0:	f000 fe60 	bl	8001974 <HAL_GPIO_WritePin>
            break;
 8000cb4:	e007      	b.n	8000cc6 <LED_Off+0x46>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LED_OFF);  // PB14: LED 3 (red)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <LED_Off+0x50>)
 8000cbe:	f000 fe59 	bl	8001974 <HAL_GPIO_WritePin>
            break;
 8000cc2:	e000      	b.n	8000cc6 <LED_Off+0x46>
            break;
 8000cc4:	bf00      	nop
    }
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f931 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fd40 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f93b 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f911 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000784 	.word	0x20000784

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000784 	.word	0x20000784

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5c 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e06c      	b.n	80010b8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2223      	movs	r2, #35	@ 0x23
 8000fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff fbf3 	bl	80007dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <HAL_ETH_Init+0xf4>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	4a30      	ldr	r2, [pc, #192]	@ (80010c0 <HAL_ETH_Init+0xf4>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001004:	6453      	str	r3, [r2, #68]	@ 0x44
 8001006:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <HAL_ETH_Init+0xf4>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001012:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <HAL_ETH_Init+0xf8>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a2b      	ldr	r2, [pc, #172]	@ (80010c4 <HAL_ETH_Init+0xf8>)
 8001018:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800101c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800101e:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <HAL_ETH_Init+0xf8>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4927      	ldr	r1, [pc, #156]	@ (80010c4 <HAL_ETH_Init+0xf8>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800102c:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <HAL_ETH_Init+0xf8>)
 800102e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001046:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001048:	f7ff feaa 	bl	8000da0 <HAL_GetTick>
 800104c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800104e:	e011      	b.n	8001074 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001050:	f7ff fea6 	bl	8000da0 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800105e:	d909      	bls.n	8001074 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2204      	movs	r2, #4
 8001064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	22e0      	movs	r2, #224	@ 0xe0
 800106c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e021      	b.n	80010b8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1e4      	bne.n	8001050 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f958 	bl	800133c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f9ff 	bl	8001490 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fa55 	bl	8001542 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	461a      	mov	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f9bd 	bl	8001420 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2210      	movs	r2, #16
 80010b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40013800 	.word	0x40013800

080010c8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4b51      	ldr	r3, [pc, #324]	@ (8001224 <ETH_SetMACConfig+0x15c>)
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	7c1b      	ldrb	r3, [r3, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <ETH_SetMACConfig+0x28>
 80010ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010ee:	e000      	b.n	80010f2 <ETH_SetMACConfig+0x2a>
 80010f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	7c5b      	ldrb	r3, [r3, #17]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <ETH_SetMACConfig+0x38>
 80010fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010fe:	e000      	b.n	8001102 <ETH_SetMACConfig+0x3a>
 8001100:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001102:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001108:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	7fdb      	ldrb	r3, [r3, #31]
 800110e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001110:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001116:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	7f92      	ldrb	r2, [r2, #30]
 800111c:	2a00      	cmp	r2, #0
 800111e:	d102      	bne.n	8001126 <ETH_SetMACConfig+0x5e>
 8001120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001124:	e000      	b.n	8001128 <ETH_SetMACConfig+0x60>
 8001126:	2200      	movs	r2, #0
                        macconf->Speed |
 8001128:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	7f1b      	ldrb	r3, [r3, #28]
 800112e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001130:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001136:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	791b      	ldrb	r3, [r3, #4]
 800113c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800113e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001146:	2a00      	cmp	r2, #0
 8001148:	d102      	bne.n	8001150 <ETH_SetMACConfig+0x88>
 800114a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800114e:	e000      	b.n	8001152 <ETH_SetMACConfig+0x8a>
 8001150:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001152:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	7bdb      	ldrb	r3, [r3, #15]
 8001158:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800115a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001160:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001168:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800116a:	4313      	orrs	r3, r2
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff fe18 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800119e:	4013      	ands	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d101      	bne.n	80011b6 <ETH_SetMACConfig+0xee>
 80011b2:	2280      	movs	r2, #128	@ 0x80
 80011b4:	e000      	b.n	80011b8 <ETH_SetMACConfig+0xf0>
 80011b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80011c6:	2a01      	cmp	r2, #1
 80011c8:	d101      	bne.n	80011ce <ETH_SetMACConfig+0x106>
 80011ca:	2208      	movs	r2, #8
 80011cc:	e000      	b.n	80011d0 <ETH_SetMACConfig+0x108>
 80011ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80011d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80011d8:	2a01      	cmp	r2, #1
 80011da:	d101      	bne.n	80011e0 <ETH_SetMACConfig+0x118>
 80011dc:	2204      	movs	r2, #4
 80011de:	e000      	b.n	80011e2 <ETH_SetMACConfig+0x11a>
 80011e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80011ea:	2a01      	cmp	r2, #1
 80011ec:	d101      	bne.n	80011f2 <ETH_SetMACConfig+0x12a>
 80011ee:	2202      	movs	r2, #2
 80011f0:	e000      	b.n	80011f4 <ETH_SetMACConfig+0x12c>
 80011f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011f4:	4313      	orrs	r3, r2
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fdd3 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	619a      	str	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	ff20810f 	.word	0xff20810f

08001228 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	4b3d      	ldr	r3, [pc, #244]	@ (8001338 <ETH_SetDMAConfig+0x110>)
 8001242:	4013      	ands	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	7b1b      	ldrb	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <ETH_SetDMAConfig+0x2c>
 800124e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001252:	e000      	b.n	8001256 <ETH_SetDMAConfig+0x2e>
 8001254:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	7b5b      	ldrb	r3, [r3, #13]
 800125a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800125c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	7f52      	ldrb	r2, [r2, #29]
 8001262:	2a00      	cmp	r2, #0
 8001264:	d102      	bne.n	800126c <ETH_SetDMAConfig+0x44>
 8001266:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800126a:	e000      	b.n	800126e <ETH_SetDMAConfig+0x46>
 800126c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800126e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	7b9b      	ldrb	r3, [r3, #14]
 8001274:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001276:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800127c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	7f1b      	ldrb	r3, [r3, #28]
 8001282:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001284:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	7f9b      	ldrb	r3, [r3, #30]
 800128a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800128c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001292:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800129a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800129c:	4313      	orrs	r3, r2
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fd7a 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012cc:	461a      	mov	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	791b      	ldrb	r3, [r3, #4]
 80012d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80012e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80012e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80012f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001300:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800130a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800130e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fd4b 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	f8de3f23 	.word	0xf8de3f23

0800133c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0a6      	sub	sp, #152	@ 0x98
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001344:	2301      	movs	r3, #1
 8001346:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800135a:	2301      	movs	r3, #1
 800135c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001366:	2301      	movs	r3, #1
 8001368:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001378:	2300      	movs	r3, #0
 800137a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001382:	2300      	movs	r3, #0
 8001384:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800139e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80013a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80013b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fe86 	bl	80010c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80013bc:	2301      	movs	r3, #1
 80013be:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80013c0:	2301      	movs	r3, #1
 80013c2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80013e8:	2301      	movs	r3, #1
 80013ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80013ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80013f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80013f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001404:	2300      	movs	r3, #0
 8001406:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff08 	bl	8001228 <ETH_SetDMAConfig>
}
 8001418:	bf00      	nop
 800141a:	3798      	adds	r7, #152	@ 0x98
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3305      	adds	r3, #5
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	3204      	adds	r2, #4
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	4313      	orrs	r3, r2
 800143c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <ETH_MACAddressConfig+0x68>)
 8001442:	4413      	add	r3, r2
 8001444:	461a      	mov	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3303      	adds	r3, #3
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	061a      	lsls	r2, r3, #24
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3302      	adds	r3, #2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3301      	adds	r3, #1
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	4313      	orrs	r3, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <ETH_MACAddressConfig+0x6c>)
 8001472:	4413      	add	r3, r2
 8001474:	461a      	mov	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	6013      	str	r3, [r2, #0]
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40028040 	.word	0x40028040
 800148c:	40028044 	.word	0x40028044

08001490 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e03e      	b.n	800151c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68d9      	ldr	r1, [r3, #12]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	3206      	adds	r2, #6
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d80c      	bhi.n	8001500 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68d9      	ldr	r1, [r3, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	461a      	mov	r2, r3
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	e004      	b.n	800150a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d9bd      	bls.n	800149e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001534:	611a      	str	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	e046      	b.n	80015de <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6919      	ldr	r1, [r3, #16]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800158c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001594:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	3212      	adds	r2, #18
 80015aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d80c      	bhi.n	80015ce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6919      	ldr	r1, [r3, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	461a      	mov	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	e004      	b.n	80015d8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3301      	adds	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d9b5      	bls.n	8001550 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800160e:	60da      	str	r2, [r3, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e177      	b.n	8001928 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8166 	bne.w	8001922 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166a:	2b02      	cmp	r3, #2
 800166c:	d130      	bne.n	80016d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d017      	beq.n	800170c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d123      	bne.n	8001760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	69b9      	ldr	r1, [r7, #24]
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80c0 	beq.w	8001922 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b66      	ldr	r3, [pc, #408]	@ (8001940 <HAL_GPIO_Init+0x324>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	4a65      	ldr	r2, [pc, #404]	@ (8001940 <HAL_GPIO_Init+0x324>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b2:	4b63      	ldr	r3, [pc, #396]	@ (8001940 <HAL_GPIO_Init+0x324>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017be:	4a61      	ldr	r2, [pc, #388]	@ (8001944 <HAL_GPIO_Init+0x328>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <HAL_GPIO_Init+0x32c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d037      	beq.n	800185a <HAL_GPIO_Init+0x23e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a57      	ldr	r2, [pc, #348]	@ (800194c <HAL_GPIO_Init+0x330>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d031      	beq.n	8001856 <HAL_GPIO_Init+0x23a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a56      	ldr	r2, [pc, #344]	@ (8001950 <HAL_GPIO_Init+0x334>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d02b      	beq.n	8001852 <HAL_GPIO_Init+0x236>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a55      	ldr	r2, [pc, #340]	@ (8001954 <HAL_GPIO_Init+0x338>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x232>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a54      	ldr	r2, [pc, #336]	@ (8001958 <HAL_GPIO_Init+0x33c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x22e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a53      	ldr	r2, [pc, #332]	@ (800195c <HAL_GPIO_Init+0x340>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x22a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a52      	ldr	r2, [pc, #328]	@ (8001960 <HAL_GPIO_Init+0x344>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x226>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a51      	ldr	r2, [pc, #324]	@ (8001964 <HAL_GPIO_Init+0x348>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x222>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a50      	ldr	r2, [pc, #320]	@ (8001968 <HAL_GPIO_Init+0x34c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x21e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4f      	ldr	r2, [pc, #316]	@ (800196c <HAL_GPIO_Init+0x350>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x21a>
 8001832:	2309      	movs	r3, #9
 8001834:	e012      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001836:	230a      	movs	r3, #10
 8001838:	e010      	b.n	800185c <HAL_GPIO_Init+0x240>
 800183a:	2308      	movs	r3, #8
 800183c:	e00e      	b.n	800185c <HAL_GPIO_Init+0x240>
 800183e:	2307      	movs	r3, #7
 8001840:	e00c      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001842:	2306      	movs	r3, #6
 8001844:	e00a      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001846:	2305      	movs	r3, #5
 8001848:	e008      	b.n	800185c <HAL_GPIO_Init+0x240>
 800184a:	2304      	movs	r3, #4
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x240>
 800184e:	2303      	movs	r3, #3
 8001850:	e004      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001852:	2302      	movs	r3, #2
 8001854:	e002      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x240>
 800185a:	2300      	movs	r3, #0
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f002 0203 	and.w	r2, r2, #3
 8001862:	0092      	lsls	r2, r2, #2
 8001864:	4093      	lsls	r3, r2
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800186c:	4935      	ldr	r1, [pc, #212]	@ (8001944 <HAL_GPIO_Init+0x328>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187a:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <HAL_GPIO_Init+0x354>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189e:	4a34      	ldr	r2, [pc, #208]	@ (8001970 <HAL_GPIO_Init+0x354>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a4:	4b32      	ldr	r3, [pc, #200]	@ (8001970 <HAL_GPIO_Init+0x354>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c8:	4a29      	ldr	r2, [pc, #164]	@ (8001970 <HAL_GPIO_Init+0x354>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ce:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <HAL_GPIO_Init+0x354>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <HAL_GPIO_Init+0x354>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <HAL_GPIO_Init+0x354>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <HAL_GPIO_Init+0x354>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3301      	adds	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	f67f ae84 	bls.w	8001638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3724      	adds	r7, #36	@ 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40013800 	.word	0x40013800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020400 	.word	0x40020400
 8001950:	40020800 	.word	0x40020800
 8001954:	40020c00 	.word	0x40020c00
 8001958:	40021000 	.word	0x40021000
 800195c:	40021400 	.word	0x40021400
 8001960:	40021800 	.word	0x40021800
 8001964:	40021c00 	.word	0x40021c00
 8001968:	40022000 	.word	0x40022000
 800196c:	40022400 	.word	0x40022400
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e101      	b.n	8001bbc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff f810 	bl	80009f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019e6:	d102      	bne.n	80019ee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 f8a6 	bl	8002b44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7c1a      	ldrb	r2, [r3, #16]
 8001a00:	f88d 2000 	strb.w	r2, [sp]
 8001a04:	3304      	adds	r3, #4
 8001a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a08:	f001 f838 	bl	8002a7c <USB_CoreInit>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0ce      	b.n	8001bbc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 f89e 	bl	8002b66 <USB_SetCurrentMode>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0bf      	b.n	8001bbc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e04a      	b.n	8001ad8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3315      	adds	r3, #21
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3314      	adds	r3, #20
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	b298      	uxth	r0, r3
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	332e      	adds	r3, #46	@ 0x2e
 8001a7e:	4602      	mov	r2, r0
 8001a80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	3318      	adds	r3, #24
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	331c      	adds	r3, #28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3320      	adds	r3, #32
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	3324      	adds	r3, #36	@ 0x24
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d3af      	bcc.n	8001a42 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	e044      	b.n	8001b72 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	791b      	ldrb	r3, [r3, #4]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3b5      	bcc.n	8001ae8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7c1a      	ldrb	r2, [r3, #16]
 8001b84:	f88d 2000 	strb.w	r2, [sp]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b8c:	f001 f838 	bl	8002c00 <USB_DevInit>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00c      	b.n	8001bbc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fa00 	bl	8002fba <USB_DevDisconnect>

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e267      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d075      	beq.n	8001cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be2:	4b88      	ldr	r3, [pc, #544]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d00c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	4b85      	ldr	r3, [pc, #532]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d112      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b82      	ldr	r3, [pc, #520]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c06:	d10b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4b7e      	ldr	r3, [pc, #504]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d05b      	beq.n	8001ccc <HAL_RCC_OscConfig+0x108>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d157      	bne.n	8001ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e242      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c28:	d106      	bne.n	8001c38 <HAL_RCC_OscConfig+0x74>
 8001c2a:	4b76      	ldr	r3, [pc, #472]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a75      	ldr	r2, [pc, #468]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b70      	ldr	r3, [pc, #448]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6f      	ldr	r2, [pc, #444]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6c      	ldr	r2, [pc, #432]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xb0>
 8001c5c:	4b69      	ldr	r3, [pc, #420]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a68      	ldr	r2, [pc, #416]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b66      	ldr	r3, [pc, #408]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a65      	ldr	r2, [pc, #404]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f890 	bl	8000da0 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff f88c 	bl	8000da0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e207      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b5b      	ldr	r3, [pc, #364]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xc0>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f87c 	bl	8000da0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff f878 	bl	8000da0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	@ 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1f3      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b51      	ldr	r3, [pc, #324]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0xe8>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cda:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b44      	ldr	r3, [pc, #272]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b41      	ldr	r3, [pc, #260]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1c7      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4937      	ldr	r1, [pc, #220]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_RCC_OscConfig+0x244>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f831 	bl	8000da0 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff f82d 	bl	8000da0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1a8      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b28      	ldr	r3, [pc, #160]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4925      	ldr	r1, [pc, #148]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <HAL_RCC_OscConfig+0x244>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f810 	bl	8000da0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff f80c 	bl	8000da0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e187      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d036      	beq.n	8001e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_RCC_OscConfig+0x248>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7fe fff0 	bl	8000da0 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7fe ffec 	bl	8000da0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e167      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x200>
 8001de2:	e01b      	b.n	8001e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_RCC_OscConfig+0x248>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7fe ffd9 	bl	8000da0 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	e00e      	b.n	8001e10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7fe ffd5 	bl	8000da0 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d907      	bls.n	8001e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e150      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	42470000 	.word	0x42470000
 8001e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b88      	ldr	r3, [pc, #544]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ea      	bne.n	8001df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8097 	beq.w	8001f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b81      	ldr	r3, [pc, #516]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4a7c      	ldr	r2, [pc, #496]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b74      	ldr	r3, [pc, #464]	@ (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a73      	ldr	r2, [pc, #460]	@ (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7fe ff95 	bl	8000da0 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7fe ff91 	bl	8000da0 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e10c      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002038 <HAL_RCC_OscConfig+0x474>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x2ea>
 8001ea0:	4b64      	ldr	r3, [pc, #400]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea4:	4a63      	ldr	r2, [pc, #396]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eac:	e01c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x324>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x30c>
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eba:	4a5e      	ldr	r2, [pc, #376]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x324>
 8001ed0:	4b58      	ldr	r3, [pc, #352]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a57      	ldr	r2, [pc, #348]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001edc:	4b55      	ldr	r3, [pc, #340]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	4a54      	ldr	r2, [pc, #336]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7fe ff56 	bl	8000da0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7fe ff52 	bl	8000da0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0cb      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ee      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x334>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7fe ff40 	bl	8000da0 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7fe ff3c 	bl	8000da0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0b5      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ee      	bne.n	8001f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b39      	ldr	r3, [pc, #228]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	4a38      	ldr	r2, [pc, #224]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a1 	beq.w	80020a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f62:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d05c      	beq.n	8002028 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d141      	bne.n	8001ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b31      	ldr	r3, [pc, #196]	@ (800203c <HAL_RCC_OscConfig+0x478>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff10 	bl	8000da0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe ff0c 	bl	8000da0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e087      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	491b      	ldr	r1, [pc, #108]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <HAL_RCC_OscConfig+0x478>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fee5 	bl	8000da0 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fee1 	bl	8000da0 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e05c      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x416>
 8001ff8:	e054      	b.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_RCC_OscConfig+0x478>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe fece 	bl	8000da0 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe feca 	bl	8000da0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e045      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_RCC_OscConfig+0x470>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x444>
 8002026:	e03d      	b.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e038      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
 800203c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_RCC_OscConfig+0x4ec>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d028      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d121      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d11a      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002070:	4013      	ands	r3, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002078:	4293      	cmp	r3, r2
 800207a:	d111      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	3b01      	subs	r3, #1
 800208a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0cc      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b68      	ldr	r3, [pc, #416]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d90c      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b65      	ldr	r3, [pc, #404]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a58      	ldr	r2, [pc, #352]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a52      	ldr	r2, [pc, #328]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800212a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d044      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d119      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	2b03      	cmp	r3, #3
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b3b      	ldr	r3, [pc, #236]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e067      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b37      	ldr	r3, [pc, #220]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4934      	ldr	r1, [pc, #208]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a4:	f7fe fdfc 	bl	8000da0 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe fdf8 	bl	8000da0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d4:	4b25      	ldr	r3, [pc, #148]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d20c      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b22      	ldr	r3, [pc, #136]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800223a:	f000 f821 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	@ (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fd5c 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00
 8002270:	40023800 	.word	0x40023800
 8002274:	080030f4 	.word	0x080030f4
 8002278:	20000000 	.word	0x20000000
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002284:	b094      	sub	sp, #80	@ 0x50
 8002286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	647b      	str	r3, [r7, #68]	@ 0x44
 800228c:	2300      	movs	r3, #0
 800228e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002290:	2300      	movs	r3, #0
 8002292:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002298:	4b79      	ldr	r3, [pc, #484]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x200>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x40>
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	f200 80e1 	bhi.w	800246c <HAL_RCC_GetSysClockFreq+0x1ec>
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d003      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x3a>
 80022b2:	e0db      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b73      	ldr	r3, [pc, #460]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x204>)
 80022b6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80022b8:	e0db      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ba:	4b73      	ldr	r3, [pc, #460]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x208>)
 80022bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022be:	e0d8      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x200>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	2200      	movs	r2, #0
 80022de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022ea:	2300      	movs	r3, #0
 80022ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022f2:	4622      	mov	r2, r4
 80022f4:	462b      	mov	r3, r5
 80022f6:	f04f 0000 	mov.w	r0, #0
 80022fa:	f04f 0100 	mov.w	r1, #0
 80022fe:	0159      	lsls	r1, r3, #5
 8002300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002304:	0150      	lsls	r0, r2, #5
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4621      	mov	r1, r4
 800230c:	1a51      	subs	r1, r2, r1
 800230e:	6139      	str	r1, [r7, #16]
 8002310:	4629      	mov	r1, r5
 8002312:	eb63 0301 	sbc.w	r3, r3, r1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002324:	4659      	mov	r1, fp
 8002326:	018b      	lsls	r3, r1, #6
 8002328:	4651      	mov	r1, sl
 800232a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800232e:	4651      	mov	r1, sl
 8002330:	018a      	lsls	r2, r1, #6
 8002332:	4651      	mov	r1, sl
 8002334:	ebb2 0801 	subs.w	r8, r2, r1
 8002338:	4659      	mov	r1, fp
 800233a:	eb63 0901 	sbc.w	r9, r3, r1
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800234a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800234e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002352:	4690      	mov	r8, r2
 8002354:	4699      	mov	r9, r3
 8002356:	4623      	mov	r3, r4
 8002358:	eb18 0303 	adds.w	r3, r8, r3
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	462b      	mov	r3, r5
 8002360:	eb49 0303 	adc.w	r3, r9, r3
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002372:	4629      	mov	r1, r5
 8002374:	024b      	lsls	r3, r1, #9
 8002376:	4621      	mov	r1, r4
 8002378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800237c:	4621      	mov	r1, r4
 800237e:	024a      	lsls	r2, r1, #9
 8002380:	4610      	mov	r0, r2
 8002382:	4619      	mov	r1, r3
 8002384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002386:	2200      	movs	r2, #0
 8002388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800238a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800238c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002390:	f7fd ff2c 	bl	80001ec <__aeabi_uldivmod>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4613      	mov	r3, r2
 800239a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800239c:	e058      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239e:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	099b      	lsrs	r3, r3, #6
 80023a4:	2200      	movs	r2, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	4611      	mov	r1, r2
 80023aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023b8:	4642      	mov	r2, r8
 80023ba:	464b      	mov	r3, r9
 80023bc:	f04f 0000 	mov.w	r0, #0
 80023c0:	f04f 0100 	mov.w	r1, #0
 80023c4:	0159      	lsls	r1, r3, #5
 80023c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ca:	0150      	lsls	r0, r2, #5
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4641      	mov	r1, r8
 80023d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80023d6:	4649      	mov	r1, r9
 80023d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023f0:	ebb2 040a 	subs.w	r4, r2, sl
 80023f4:	eb63 050b 	sbc.w	r5, r3, fp
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	00eb      	lsls	r3, r5, #3
 8002402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002406:	00e2      	lsls	r2, r4, #3
 8002408:	4614      	mov	r4, r2
 800240a:	461d      	mov	r5, r3
 800240c:	4643      	mov	r3, r8
 800240e:	18e3      	adds	r3, r4, r3
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	464b      	mov	r3, r9
 8002414:	eb45 0303 	adc.w	r3, r5, r3
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002426:	4629      	mov	r1, r5
 8002428:	028b      	lsls	r3, r1, #10
 800242a:	4621      	mov	r1, r4
 800242c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002430:	4621      	mov	r1, r4
 8002432:	028a      	lsls	r2, r1, #10
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800243a:	2200      	movs	r2, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	61fa      	str	r2, [r7, #28]
 8002440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002444:	f7fd fed2 	bl	80001ec <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4613      	mov	r3, r2
 800244e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x200>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800246a:	e002      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x204>)
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002474:	4618      	mov	r0, r3
 8002476:	3750      	adds	r7, #80	@ 0x50
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	007a1200 	.word	0x007a1200

0800248c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff0 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0a9b      	lsrs	r3, r3, #10
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	@ (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08003104 	.word	0x08003104

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffdc 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0b5b      	lsrs	r3, r3, #13
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	@ (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08003104 	.word	0x08003104

080024f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e042      	b.n	800258c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fa24 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2224      	movs	r2, #36	@ 0x24
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f82b 	bl	8002594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800254c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800255c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800256c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002598:	b0c0      	sub	sp, #256	@ 0x100
 800259a:	af00      	add	r7, sp, #0
 800259c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b0:	68d9      	ldr	r1, [r3, #12]
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	ea40 0301 	orr.w	r3, r0, r1
 80025bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025ec:	f021 010c 	bic.w	r1, r1, #12
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025fa:	430b      	orrs	r3, r1
 80025fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260e:	6999      	ldr	r1, [r3, #24]
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	ea40 0301 	orr.w	r3, r0, r1
 800261a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b8f      	ldr	r3, [pc, #572]	@ (8002860 <UART_SetConfig+0x2cc>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d005      	beq.n	8002634 <UART_SetConfig+0xa0>
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b8d      	ldr	r3, [pc, #564]	@ (8002864 <UART_SetConfig+0x2d0>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d104      	bne.n	800263e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002634:	f7ff ff4a 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8002638:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800263c:	e003      	b.n	8002646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800263e:	f7ff ff31 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8002642:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002650:	f040 810c 	bne.w	800286c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002658:	2200      	movs	r2, #0
 800265a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800265e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002666:	4622      	mov	r2, r4
 8002668:	462b      	mov	r3, r5
 800266a:	1891      	adds	r1, r2, r2
 800266c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800266e:	415b      	adcs	r3, r3
 8002670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002676:	4621      	mov	r1, r4
 8002678:	eb12 0801 	adds.w	r8, r2, r1
 800267c:	4629      	mov	r1, r5
 800267e:	eb43 0901 	adc.w	r9, r3, r1
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002696:	4690      	mov	r8, r2
 8002698:	4699      	mov	r9, r3
 800269a:	4623      	mov	r3, r4
 800269c:	eb18 0303 	adds.w	r3, r8, r3
 80026a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026a4:	462b      	mov	r3, r5
 80026a6:	eb49 0303 	adc.w	r3, r9, r3
 80026aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026c2:	460b      	mov	r3, r1
 80026c4:	18db      	adds	r3, r3, r3
 80026c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80026c8:	4613      	mov	r3, r2
 80026ca:	eb42 0303 	adc.w	r3, r2, r3
 80026ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80026d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026d8:	f7fd fd88 	bl	80001ec <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4b61      	ldr	r3, [pc, #388]	@ (8002868 <UART_SetConfig+0x2d4>)
 80026e2:	fba3 2302 	umull	r2, r3, r3, r2
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	011c      	lsls	r4, r3, #4
 80026ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	1891      	adds	r1, r2, r2
 8002702:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002704:	415b      	adcs	r3, r3
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800270c:	4641      	mov	r1, r8
 800270e:	eb12 0a01 	adds.w	sl, r2, r1
 8002712:	4649      	mov	r1, r9
 8002714:	eb43 0b01 	adc.w	fp, r3, r1
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800272c:	4692      	mov	sl, r2
 800272e:	469b      	mov	fp, r3
 8002730:	4643      	mov	r3, r8
 8002732:	eb1a 0303 	adds.w	r3, sl, r3
 8002736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800273a:	464b      	mov	r3, r9
 800273c:	eb4b 0303 	adc.w	r3, fp, r3
 8002740:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002750:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002758:	460b      	mov	r3, r1
 800275a:	18db      	adds	r3, r3, r3
 800275c:	643b      	str	r3, [r7, #64]	@ 0x40
 800275e:	4613      	mov	r3, r2
 8002760:	eb42 0303 	adc.w	r3, r2, r3
 8002764:	647b      	str	r3, [r7, #68]	@ 0x44
 8002766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800276a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800276e:	f7fd fd3d 	bl	80001ec <__aeabi_uldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4611      	mov	r1, r2
 8002778:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <UART_SetConfig+0x2d4>)
 800277a:	fba3 2301 	umull	r2, r3, r3, r1
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2264      	movs	r2, #100	@ 0x64
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	1acb      	subs	r3, r1, r3
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800278e:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002790:	fba3 2302 	umull	r2, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800279c:	441c      	add	r4, r3
 800279e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027b0:	4642      	mov	r2, r8
 80027b2:	464b      	mov	r3, r9
 80027b4:	1891      	adds	r1, r2, r2
 80027b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027b8:	415b      	adcs	r3, r3
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027c0:	4641      	mov	r1, r8
 80027c2:	1851      	adds	r1, r2, r1
 80027c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80027c6:	4649      	mov	r1, r9
 80027c8:	414b      	adcs	r3, r1
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027d8:	4659      	mov	r1, fp
 80027da:	00cb      	lsls	r3, r1, #3
 80027dc:	4651      	mov	r1, sl
 80027de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e2:	4651      	mov	r1, sl
 80027e4:	00ca      	lsls	r2, r1, #3
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	4642      	mov	r2, r8
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027f4:	464b      	mov	r3, r9
 80027f6:	460a      	mov	r2, r1
 80027f8:	eb42 0303 	adc.w	r3, r2, r3
 80027fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800280c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002814:	460b      	mov	r3, r1
 8002816:	18db      	adds	r3, r3, r3
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800281a:	4613      	mov	r3, r2
 800281c:	eb42 0303 	adc.w	r3, r2, r3
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800282a:	f7fd fcdf 	bl	80001ec <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	2164      	movs	r1, #100	@ 0x64
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	3332      	adds	r3, #50	@ 0x32
 8002846:	4a08      	ldr	r2, [pc, #32]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	f003 0207 	and.w	r2, r3, #7
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4422      	add	r2, r4
 800285a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800285c:	e106      	b.n	8002a6c <UART_SetConfig+0x4d8>
 800285e:	bf00      	nop
 8002860:	40011000 	.word	0x40011000
 8002864:	40011400 	.word	0x40011400
 8002868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800286c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002876:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800287a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800287e:	4642      	mov	r2, r8
 8002880:	464b      	mov	r3, r9
 8002882:	1891      	adds	r1, r2, r2
 8002884:	6239      	str	r1, [r7, #32]
 8002886:	415b      	adcs	r3, r3
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800288e:	4641      	mov	r1, r8
 8002890:	1854      	adds	r4, r2, r1
 8002892:	4649      	mov	r1, r9
 8002894:	eb43 0501 	adc.w	r5, r3, r1
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	00eb      	lsls	r3, r5, #3
 80028a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a6:	00e2      	lsls	r2, r4, #3
 80028a8:	4614      	mov	r4, r2
 80028aa:	461d      	mov	r5, r3
 80028ac:	4643      	mov	r3, r8
 80028ae:	18e3      	adds	r3, r4, r3
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028b4:	464b      	mov	r3, r9
 80028b6:	eb45 0303 	adc.w	r3, r5, r3
 80028ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028da:	4629      	mov	r1, r5
 80028dc:	008b      	lsls	r3, r1, #2
 80028de:	4621      	mov	r1, r4
 80028e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028e4:	4621      	mov	r1, r4
 80028e6:	008a      	lsls	r2, r1, #2
 80028e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028ec:	f7fd fc7e 	bl	80001ec <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4b60      	ldr	r3, [pc, #384]	@ (8002a78 <UART_SetConfig+0x4e4>)
 80028f6:	fba3 2302 	umull	r2, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	011c      	lsls	r4, r3, #4
 80028fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002908:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800290c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002910:	4642      	mov	r2, r8
 8002912:	464b      	mov	r3, r9
 8002914:	1891      	adds	r1, r2, r2
 8002916:	61b9      	str	r1, [r7, #24]
 8002918:	415b      	adcs	r3, r3
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002920:	4641      	mov	r1, r8
 8002922:	1851      	adds	r1, r2, r1
 8002924:	6139      	str	r1, [r7, #16]
 8002926:	4649      	mov	r1, r9
 8002928:	414b      	adcs	r3, r1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002938:	4659      	mov	r1, fp
 800293a:	00cb      	lsls	r3, r1, #3
 800293c:	4651      	mov	r1, sl
 800293e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002942:	4651      	mov	r1, sl
 8002944:	00ca      	lsls	r2, r1, #3
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	4603      	mov	r3, r0
 800294c:	4642      	mov	r2, r8
 800294e:	189b      	adds	r3, r3, r2
 8002950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002954:	464b      	mov	r3, r9
 8002956:	460a      	mov	r2, r1
 8002958:	eb42 0303 	adc.w	r3, r2, r3
 800295c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800296a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002978:	4649      	mov	r1, r9
 800297a:	008b      	lsls	r3, r1, #2
 800297c:	4641      	mov	r1, r8
 800297e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002982:	4641      	mov	r1, r8
 8002984:	008a      	lsls	r2, r1, #2
 8002986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800298a:	f7fd fc2f 	bl	80001ec <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4611      	mov	r1, r2
 8002994:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002996:	fba3 2301 	umull	r2, r3, r3, r1
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2264      	movs	r2, #100	@ 0x64
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	1acb      	subs	r3, r1, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	3332      	adds	r3, #50	@ 0x32
 80029a8:	4a33      	ldr	r2, [pc, #204]	@ (8002a78 <UART_SetConfig+0x4e4>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b4:	441c      	add	r4, r3
 80029b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ba:	2200      	movs	r2, #0
 80029bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80029be:	677a      	str	r2, [r7, #116]	@ 0x74
 80029c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029c4:	4642      	mov	r2, r8
 80029c6:	464b      	mov	r3, r9
 80029c8:	1891      	adds	r1, r2, r2
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	415b      	adcs	r3, r3
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d4:	4641      	mov	r1, r8
 80029d6:	1851      	adds	r1, r2, r1
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	4649      	mov	r1, r9
 80029dc:	414b      	adcs	r3, r1
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029ec:	4659      	mov	r1, fp
 80029ee:	00cb      	lsls	r3, r1, #3
 80029f0:	4651      	mov	r1, sl
 80029f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029f6:	4651      	mov	r1, sl
 80029f8:	00ca      	lsls	r2, r1, #3
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	4642      	mov	r2, r8
 8002a02:	189b      	adds	r3, r3, r2
 8002a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a06:	464b      	mov	r3, r9
 8002a08:	460a      	mov	r2, r1
 8002a0a:	eb42 0303 	adc.w	r3, r2, r3
 8002a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a28:	4649      	mov	r1, r9
 8002a2a:	008b      	lsls	r3, r1, #2
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a32:	4641      	mov	r1, r8
 8002a34:	008a      	lsls	r2, r1, #2
 8002a36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a3a:	f7fd fbd7 	bl	80001ec <__aeabi_uldivmod>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002a44:	fba3 1302 	umull	r1, r3, r3, r2
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	2164      	movs	r1, #100	@ 0x64
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	3332      	adds	r3, #50	@ 0x32
 8002a56:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4422      	add	r2, r4
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a72:	46bd      	mov	sp, r7
 8002a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a78:	51eb851f 	.word	0x51eb851f

08002a7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	f107 001c 	add.w	r0, r7, #28
 8002a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d123      	bne.n	8002ade <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002abe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 faa0 	bl	8003018 <USB_CoreReset>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e01b      	b.n	8002b16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa94 	bl	8003018 <USB_CoreReset>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002af4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b08:	e005      	b.n	8002b16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b16:	7fbb      	ldrb	r3, [r7, #30]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10b      	bne.n	8002b34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f043 0206 	orr.w	r2, r3, #6
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b40:	b004      	add	sp, #16
 8002b42:	4770      	bx	lr

08002b44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 0201 	bic.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d115      	bne.n	8002bb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002b94:	200a      	movs	r0, #10
 8002b96:	f7fe f90f 	bl	8000db8 <HAL_Delay>
      ms += 10U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	330a      	adds	r3, #10
 8002b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fa2b 	bl	8002ffc <USB_GetMode>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d01e      	beq.n	8002bea <USB_SetCurrentMode+0x84>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bb0:	d9f0      	bls.n	8002b94 <USB_SetCurrentMode+0x2e>
 8002bb2:	e01a      	b.n	8002bea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002bc6:	200a      	movs	r0, #10
 8002bc8:	f7fe f8f6 	bl	8000db8 <HAL_Delay>
      ms += 10U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	330a      	adds	r3, #10
 8002bd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa12 	bl	8002ffc <USB_GetMode>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <USB_SetCurrentMode+0x84>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2bc7      	cmp	r3, #199	@ 0xc7
 8002be2:	d9f0      	bls.n	8002bc6 <USB_SetCurrentMode+0x60>
 8002be4:	e001      	b.n	8002bea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e005      	b.n	8002bf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2bc8      	cmp	r3, #200	@ 0xc8
 8002bee:	d101      	bne.n	8002bf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c00:	b084      	sub	sp, #16
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e009      	b.n	8002c34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	3340      	adds	r3, #64	@ 0x40
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	3301      	adds	r3, #1
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b0e      	cmp	r3, #14
 8002c38:	d9f2      	bls.n	8002c20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11c      	bne.n	8002c7c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c7a:	e00b      	b.n	8002c94 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ca0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10d      	bne.n	8002cc4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f968 	bl	8002f88 <USB_SetDevSpeed>
 8002cb8:	e008      	b.n	8002ccc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002cba:	2101      	movs	r1, #1
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f963 	bl	8002f88 <USB_SetDevSpeed>
 8002cc2:	e003      	b.n	8002ccc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f95e 	bl	8002f88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ccc:	2110      	movs	r1, #16
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f8fa 	bl	8002ec8 <USB_FlushTxFifo>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f924 	bl	8002f2c <USB_FlushRxFifo>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d00:	461a      	mov	r2, r3
 8002d02:	2300      	movs	r3, #0
 8002d04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	e043      	b.n	8002da0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d2e:	d118      	bne.n	8002d62 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d42:	461a      	mov	r2, r3
 8002d44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e013      	b.n	8002d74 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e008      	b.n	8002d74 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d80:	461a      	mov	r2, r3
 8002d82:	2300      	movs	r3, #0
 8002d84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d92:	461a      	mov	r2, r3
 8002d94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002da4:	461a      	mov	r2, r3
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d3b5      	bcc.n	8002d18 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	e043      	b.n	8002e3a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dc8:	d118      	bne.n	8002dfc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	e013      	b.n	8002e0e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df2:	461a      	mov	r2, r3
 8002df4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e008      	b.n	8002e0e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	3301      	adds	r3, #1
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e3e:	461a      	mov	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d3b5      	bcc.n	8002db2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002e66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f043 0210 	orr.w	r2, r3, #16
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <USB_DevInit+0x2c4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f043 0208 	orr.w	r2, r3, #8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002e9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ec0:	b004      	add	sp, #16
 8002ec2:	4770      	bx	lr
 8002ec4:	803c3800 	.word	0x803c3800

08002ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ee2:	d901      	bls.n	8002ee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e01b      	b.n	8002f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	daf2      	bge.n	8002ed6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	019b      	lsls	r3, r3, #6
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f0c:	d901      	bls.n	8002f12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e006      	b.n	8002f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d0f0      	beq.n	8002f00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f44:	d901      	bls.n	8002f4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e018      	b.n	8002f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	daf2      	bge.n	8002f38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f68:	d901      	bls.n	8002f6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e006      	b.n	8002f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d0f0      	beq.n	8002f5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8002fd4:	f023 0303 	bic.w	r3, r3, #3
 8002fd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0301 	and.w	r3, r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003030:	d901      	bls.n	8003036 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e01b      	b.n	800306e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	daf2      	bge.n	8003024 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f043 0201 	orr.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3301      	adds	r3, #1
 8003052:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800305a:	d901      	bls.n	8003060 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e006      	b.n	800306e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d0f0      	beq.n	800304e <USB_CoreReset+0x36>

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <memset>:
 800307a:	4402      	add	r2, r0
 800307c:	4603      	mov	r3, r0
 800307e:	4293      	cmp	r3, r2
 8003080:	d100      	bne.n	8003084 <memset+0xa>
 8003082:	4770      	bx	lr
 8003084:	f803 1b01 	strb.w	r1, [r3], #1
 8003088:	e7f9      	b.n	800307e <memset+0x4>
	...

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	4d0d      	ldr	r5, [pc, #52]	@ (80030c4 <__libc_init_array+0x38>)
 8003090:	4c0d      	ldr	r4, [pc, #52]	@ (80030c8 <__libc_init_array+0x3c>)
 8003092:	1b64      	subs	r4, r4, r5
 8003094:	10a4      	asrs	r4, r4, #2
 8003096:	2600      	movs	r6, #0
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	4d0b      	ldr	r5, [pc, #44]	@ (80030cc <__libc_init_array+0x40>)
 800309e:	4c0c      	ldr	r4, [pc, #48]	@ (80030d0 <__libc_init_array+0x44>)
 80030a0:	f000 f818 	bl	80030d4 <_init>
 80030a4:	1b64      	subs	r4, r4, r5
 80030a6:	10a4      	asrs	r4, r4, #2
 80030a8:	2600      	movs	r6, #0
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	08003114 	.word	0x08003114
 80030c8:	08003114 	.word	0x08003114
 80030cc:	08003114 	.word	0x08003114
 80030d0:	08003118 	.word	0x08003118

080030d4 <_init>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr

080030e0 <_fini>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr
