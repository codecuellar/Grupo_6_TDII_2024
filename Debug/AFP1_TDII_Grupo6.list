
AFP1_TDII_Grupo6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003090  08003090  00004090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a8  080030a8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080030a8  080030a8  000040a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030b0  080030b0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b0  080030b0  000040b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030b4  080030b4  000040b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000077c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000788  20000788  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dee4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c13  00000000  00000000  00012f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  00014b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000897  00000000  00000000  00015658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cbd  00000000  00000000  00015eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc52  00000000  00000000  00039bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9d67  00000000  00000000  000467fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120565  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f08  00000000  00000000  001205a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001234b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003078 	.word	0x08003078

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003078 	.word	0x08003078

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fbca 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f80a 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f918 	bl	800071c <MX_GPIO_Init>
  MX_ETH_Init();
 80004ec:	f000 f870 	bl	80005d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 f8bc 	bl	800066c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f4:	f000 f8e4 	bl	80006c0 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <main+0x1c>

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	@ 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f002 fd87 	bl	800301e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	4a27      	ldr	r2, [pc, #156]	@ (80005c8 <SystemClock_Config+0xcc>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b22      	ldr	r3, [pc, #136]	@ (80005cc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <SystemClock_Config+0xd0>)
 8000546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800055c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000570:	23a8      	movs	r3, #168	@ 0xa8
 8000572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000578:	2307      	movs	r3, #7
 800057a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 faf1 	bl	8001b68 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800058c:	f000 f972 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2105      	movs	r1, #5
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fd52 	bl	8002058 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ba:	f000 f95b 	bl	8000874 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	@ 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <MX_ETH_Init+0x84>)
 80005d6:	4a20      	ldr	r2, [pc, #128]	@ (8000658 <MX_ETH_Init+0x88>)
 80005d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <MX_ETH_Init+0x8c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_ETH_Init+0x8c>)
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <MX_ETH_Init+0x8c>)
 80005e8:	22e1      	movs	r2, #225	@ 0xe1
 80005ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <MX_ETH_Init+0x8c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <MX_ETH_Init+0x8c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f8:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_ETH_Init+0x8c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <MX_ETH_Init+0x84>)
 8000600:	4a16      	ldr	r2, [pc, #88]	@ (800065c <MX_ETH_Init+0x8c>)
 8000602:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <MX_ETH_Init+0x84>)
 8000606:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800060a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_ETH_Init+0x84>)
 800060e:	4a14      	ldr	r2, [pc, #80]	@ (8000660 <MX_ETH_Init+0x90>)
 8000610:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <MX_ETH_Init+0x84>)
 8000614:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_ETH_Init+0x94>)
 8000616:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000618:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_ETH_Init+0x84>)
 800061a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800061e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <MX_ETH_Init+0x84>)
 8000622:	f000 fca5 	bl	8000f70 <HAL_ETH_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800062c:	f000 f922 	bl	8000874 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000630:	2238      	movs	r2, #56	@ 0x38
 8000632:	2100      	movs	r1, #0
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ETH_Init+0x98>)
 8000636:	f002 fcf2 	bl	800301e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_ETH_Init+0x98>)
 800063c:	2221      	movs	r2, #33	@ 0x21
 800063e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_ETH_Init+0x98>)
 8000642:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000646:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MX_ETH_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200001a0 	.word	0x200001a0
 8000658:	40028000 	.word	0x40028000
 800065c:	2000077c 	.word	0x2000077c
 8000660:	20000100 	.word	0x20000100
 8000664:	20000060 	.word	0x20000060
 8000668:	20000028 	.word	0x20000028

0800066c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <MX_USART3_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_USART3_UART_Init+0x4c>)
 80006a4:	f001 fef8 	bl	8002498 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f8e1 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000250 	.word	0x20000250
 80006bc:	40004800 	.word	0x40004800

080006c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006c4:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	f001 f921 	bl	800194a <HAL_PCD_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f8b1 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000298 	.word	0x20000298

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	@ 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4b4b      	ldr	r3, [pc, #300]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a4a      	ldr	r2, [pc, #296]	@ (8000864 <MX_GPIO_Init+0x148>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b48      	ldr	r3, [pc, #288]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b44      	ldr	r3, [pc, #272]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a43      	ldr	r2, [pc, #268]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b41      	ldr	r3, [pc, #260]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b3d      	ldr	r3, [pc, #244]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a3c      	ldr	r2, [pc, #240]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b3a      	ldr	r3, [pc, #232]	@ (8000864 <MX_GPIO_Init+0x148>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b36      	ldr	r3, [pc, #216]	@ (8000864 <MX_GPIO_Init+0x148>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a35      	ldr	r2, [pc, #212]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b33      	ldr	r3, [pc, #204]	@ (8000864 <MX_GPIO_Init+0x148>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000864 <MX_GPIO_Init+0x148>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a2e      	ldr	r2, [pc, #184]	@ (8000864 <MX_GPIO_Init+0x148>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000864 <MX_GPIO_Init+0x148>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_GPIO_Init+0x148>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a27      	ldr	r2, [pc, #156]	@ (8000864 <MX_GPIO_Init+0x148>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <MX_GPIO_Init+0x148>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007e0:	4821      	ldr	r0, [pc, #132]	@ (8000868 <MX_GPIO_Init+0x14c>)
 80007e2:	f001 f899 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2140      	movs	r1, #64	@ 0x40
 80007ea:	4820      	ldr	r0, [pc, #128]	@ (800086c <MX_GPIO_Init+0x150>)
 80007ec:	f001 f894 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	481a      	ldr	r0, [pc, #104]	@ (8000870 <MX_GPIO_Init+0x154>)
 8000806:	f000 fedb 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800080a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4811      	ldr	r0, [pc, #68]	@ (8000868 <MX_GPIO_Init+0x14c>)
 8000824:	f000 fecc 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000828:	2340      	movs	r3, #64	@ 0x40
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	480b      	ldr	r0, [pc, #44]	@ (800086c <MX_GPIO_Init+0x150>)
 8000840:	f000 febe 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_GPIO_Init+0x150>)
 8000858:	f000 feb2 	bl	80015c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3730      	adds	r7, #48	@ 0x30
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400
 800086c:	40021800 	.word	0x40021800
 8000870:	40020800 	.word	0x40020800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	@ 0x38
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a55      	ldr	r2, [pc, #340]	@ (8000a44 <HAL_ETH_MspInit+0x174>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	f040 80a4 	bne.w	8000a3c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
 80008f8:	4b53      	ldr	r3, [pc, #332]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fc:	4a52      	ldr	r2, [pc, #328]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 80008fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000902:	6313      	str	r3, [r2, #48]	@ 0x30
 8000904:	4b50      	ldr	r3, [pc, #320]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800090c:	623b      	str	r3, [r7, #32]
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
 8000914:	4b4c      	ldr	r3, [pc, #304]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000918:	4a4b      	ldr	r2, [pc, #300]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 800091a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800091e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000920:	4b49      	ldr	r3, [pc, #292]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000924:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	4b45      	ldr	r3, [pc, #276]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	4a44      	ldr	r2, [pc, #272]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000936:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800093a:	6313      	str	r3, [r2, #48]	@ 0x30
 800093c:	4b42      	ldr	r3, [pc, #264]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000950:	4a3d      	ldr	r2, [pc, #244]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6313      	str	r3, [r2, #48]	@ 0x30
 8000958:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	4b37      	ldr	r3, [pc, #220]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096c:	4a36      	ldr	r2, [pc, #216]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6313      	str	r3, [r2, #48]	@ 0x30
 8000974:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4b30      	ldr	r3, [pc, #192]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000988:	4a2f      	ldr	r2, [pc, #188]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000990:	4b2d      	ldr	r3, [pc, #180]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a4:	4a28      	ldr	r2, [pc, #160]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 80009a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ac:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <HAL_ETH_MspInit+0x178>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009b8:	2332      	movs	r3, #50	@ 0x32
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c8:	230b      	movs	r3, #11
 80009ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <HAL_ETH_MspInit+0x17c>)
 80009d4:	f000 fdf4 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009d8:	2386      	movs	r3, #134	@ 0x86
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e8:	230b      	movs	r3, #11
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	4817      	ldr	r0, [pc, #92]	@ (8000a50 <HAL_ETH_MspInit+0x180>)
 80009f4:	f000 fde4 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0a:	230b      	movs	r3, #11
 8000a0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	480f      	ldr	r0, [pc, #60]	@ (8000a54 <HAL_ETH_MspInit+0x184>)
 8000a16:	f000 fdd3 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a1a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2c:	230b      	movs	r3, #11
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <HAL_ETH_MspInit+0x188>)
 8000a38:	f000 fdc2 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3738      	adds	r7, #56	@ 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40028000 	.word	0x40028000
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40021800 	.word	0x40021800

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	@ (8000ae0 <HAL_UART_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12c      	bne.n	8000ad8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a10      	ldr	r2, [pc, #64]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ab6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <HAL_UART_MspInit+0x8c>)
 8000ad4:	f000 fd74 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40004800 	.word	0x40004800
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b0c:	d13f      	bne.n	8000b8e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <HAL_PCD_MspInit+0xac>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a20      	ldr	r2, [pc, #128]	@ (8000b98 <HAL_PCD_MspInit+0xac>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <HAL_PCD_MspInit+0xac>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b2a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b3c:	230a      	movs	r3, #10
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4815      	ldr	r0, [pc, #84]	@ (8000b9c <HAL_PCD_MspInit+0xb0>)
 8000b48:	f000 fd3a 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <HAL_PCD_MspInit+0xb0>)
 8000b62:	f000 fd2d 	bl	80015c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <HAL_PCD_MspInit+0xac>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <HAL_PCD_MspInit+0xac>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b70:	6353      	str	r3, [r2, #52]	@ 0x34
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_PCD_MspInit+0xac>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_PCD_MspInit+0xac>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_PCD_MspInit+0xac>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f891 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c28:	f7ff ffea 	bl	8000c00 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f002 f9ed 	bl	8003030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc41 	bl	80004dc <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c68:	080030b8 	.word	0x080030b8
  ldr r2, =_sbss
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c70:	20000788 	.word	0x20000788

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f931 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fde8 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f93b 	bl	8000f56 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f911 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	@ (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000784 	.word	0x20000784

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000784 	.word	0x20000784

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	@ (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	@ (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	@ 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	@ 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff47 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff5c 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffb0 	bl	8000ec4 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e06c      	b.n	800105c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d106      	bne.n	8000f9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2223      	movs	r2, #35	@ 0x23
 8000f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fc9b 	bl	80008d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b31      	ldr	r3, [pc, #196]	@ (8001064 <HAL_ETH_Init+0xf4>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a30      	ldr	r2, [pc, #192]	@ (8001064 <HAL_ETH_Init+0xf4>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <HAL_ETH_Init+0xf4>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <HAL_ETH_Init+0xf8>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a2b      	ldr	r2, [pc, #172]	@ (8001068 <HAL_ETH_Init+0xf8>)
 8000fbc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000fc0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fc2:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <HAL_ETH_Init+0xf8>)
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	4927      	ldr	r1, [pc, #156]	@ (8001068 <HAL_ETH_Init+0xf8>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <HAL_ETH_Init+0xf8>)
 8000fd2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000fea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fec:	f7ff feaa 	bl	8000d44 <HAL_GetTick>
 8000ff0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000ff2:	e011      	b.n	8001018 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000ff4:	f7ff fea6 	bl	8000d44 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001002:	d909      	bls.n	8001018 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2204      	movs	r2, #4
 8001008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	22e0      	movs	r2, #224	@ 0xe0
 8001010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e021      	b.n	800105c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1e4      	bne.n	8000ff4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f958 	bl	80012e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f9ff 	bl	8001434 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fa55 	bl	80014e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	461a      	mov	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f9bd 	bl	80013c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2210      	movs	r2, #16
 8001056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800

0800106c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4b51      	ldr	r3, [pc, #324]	@ (80011c8 <ETH_SetMACConfig+0x15c>)
 8001082:	4013      	ands	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	7c1b      	ldrb	r3, [r3, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <ETH_SetMACConfig+0x28>
 800108e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001092:	e000      	b.n	8001096 <ETH_SetMACConfig+0x2a>
 8001094:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7c5b      	ldrb	r3, [r3, #17]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <ETH_SetMACConfig+0x38>
 800109e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010a2:	e000      	b.n	80010a6 <ETH_SetMACConfig+0x3a>
 80010a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80010ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	7fdb      	ldrb	r3, [r3, #31]
 80010b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80010b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80010ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	7f92      	ldrb	r2, [r2, #30]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d102      	bne.n	80010ca <ETH_SetMACConfig+0x5e>
 80010c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c8:	e000      	b.n	80010cc <ETH_SetMACConfig+0x60>
 80010ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80010cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	7f1b      	ldrb	r3, [r3, #28]
 80010d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80010d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80010da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	791b      	ldrb	r3, [r3, #4]
 80010e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80010e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d102      	bne.n	80010f4 <ETH_SetMACConfig+0x88>
 80010ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f2:	e000      	b.n	80010f6 <ETH_SetMACConfig+0x8a>
 80010f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80010f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	7bdb      	ldrb	r3, [r3, #15]
 80010fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80010fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001104:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800110c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800110e:	4313      	orrs	r3, r2
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fe18 	bl	8000d5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001142:	4013      	ands	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800114a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001152:	2a00      	cmp	r2, #0
 8001154:	d101      	bne.n	800115a <ETH_SetMACConfig+0xee>
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	e000      	b.n	800115c <ETH_SetMACConfig+0xf0>
 800115a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800115c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001162:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800116a:	2a01      	cmp	r2, #1
 800116c:	d101      	bne.n	8001172 <ETH_SetMACConfig+0x106>
 800116e:	2208      	movs	r2, #8
 8001170:	e000      	b.n	8001174 <ETH_SetMACConfig+0x108>
 8001172:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001174:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800117c:	2a01      	cmp	r2, #1
 800117e:	d101      	bne.n	8001184 <ETH_SetMACConfig+0x118>
 8001180:	2204      	movs	r2, #4
 8001182:	e000      	b.n	8001186 <ETH_SetMACConfig+0x11a>
 8001184:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001186:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800118e:	2a01      	cmp	r2, #1
 8001190:	d101      	bne.n	8001196 <ETH_SetMACConfig+0x12a>
 8001192:	2202      	movs	r2, #2
 8001194:	e000      	b.n	8001198 <ETH_SetMACConfig+0x12c>
 8001196:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001198:	4313      	orrs	r3, r2
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fdd3 	bl	8000d5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	ff20810f 	.word	0xff20810f

080011cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4b3d      	ldr	r3, [pc, #244]	@ (80012dc <ETH_SetDMAConfig+0x110>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	7b1b      	ldrb	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <ETH_SetDMAConfig+0x2c>
 80011f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011f6:	e000      	b.n	80011fa <ETH_SetDMAConfig+0x2e>
 80011f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	7b5b      	ldrb	r3, [r3, #13]
 80011fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001200:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	7f52      	ldrb	r2, [r2, #29]
 8001206:	2a00      	cmp	r2, #0
 8001208:	d102      	bne.n	8001210 <ETH_SetDMAConfig+0x44>
 800120a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800120e:	e000      	b.n	8001212 <ETH_SetDMAConfig+0x46>
 8001210:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001212:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	7b9b      	ldrb	r3, [r3, #14]
 8001218:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800121a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001220:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	7f1b      	ldrb	r3, [r3, #28]
 8001226:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001228:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	7f9b      	ldrb	r3, [r3, #30]
 800122e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001230:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001236:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800123e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001240:	4313      	orrs	r3, r2
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fd7a 	bl	8000d5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001270:	461a      	mov	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001280:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001286:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800128c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001294:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001296:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800129e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fd4b 	bl	8000d5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	f8de3f23 	.word	0xf8de3f23

080012e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0a6      	sub	sp, #152	@ 0x98
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800130a:	2301      	movs	r3, #1
 800130c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800131c:	2300      	movs	r3, #0
 800131e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001326:	2300      	movs	r3, #0
 8001328:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001342:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001346:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001348:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800134c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001354:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fe86 	bl	800106c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001360:	2301      	movs	r3, #1
 8001362:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001364:	2301      	movs	r3, #1
 8001366:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001368:	2301      	movs	r3, #1
 800136a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800136e:	2301      	movs	r3, #1
 8001370:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001386:	2301      	movs	r3, #1
 8001388:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800138c:	2301      	movs	r3, #1
 800138e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001394:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001396:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800139a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800139c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff08 	bl	80011cc <ETH_SetDMAConfig>
}
 80013bc:	bf00      	nop
 80013be:	3798      	adds	r7, #152	@ 0x98
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3305      	adds	r3, #5
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	3204      	adds	r2, #4
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	4313      	orrs	r3, r2
 80013e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <ETH_MACAddressConfig+0x68>)
 80013e6:	4413      	add	r3, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3303      	adds	r3, #3
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	061a      	lsls	r2, r3, #24
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3302      	adds	r3, #2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	041b      	lsls	r3, r3, #16
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3301      	adds	r3, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	4313      	orrs	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	4313      	orrs	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <ETH_MACAddressConfig+0x6c>)
 8001416:	4413      	add	r3, r2
 8001418:	461a      	mov	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	6013      	str	r3, [r2, #0]
}
 800141e:	bf00      	nop
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40028040 	.word	0x40028040
 8001430:	40028044 	.word	0x40028044

08001434 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e03e      	b.n	80014c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68d9      	ldr	r1, [r3, #12]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	3206      	adds	r2, #6
 8001474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d80c      	bhi.n	80014a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68d9      	ldr	r1, [r3, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	461a      	mov	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e004      	b.n	80014ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	461a      	mov	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d9bd      	bls.n	8001442 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d8:	611a      	str	r2, [r3, #16]
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e046      	b.n	8001582 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6919      	ldr	r1, [r3, #16]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001530:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001538:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	3212      	adds	r2, #18
 800154e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d80c      	bhi.n	8001572 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	461a      	mov	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	e004      	b.n	800157c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	461a      	mov	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d9b5      	bls.n	80014f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b2:	60da      	str	r2, [r3, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e177      	b.n	80018cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8166 	bne.w	80018c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	2b02      	cmp	r3, #2
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80c0 	beq.w	80018c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b66      	ldr	r3, [pc, #408]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a65      	ldr	r2, [pc, #404]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b63      	ldr	r3, [pc, #396]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a61      	ldr	r2, [pc, #388]	@ (80018e8 <HAL_GPIO_Init+0x328>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a58      	ldr	r2, [pc, #352]	@ (80018ec <HAL_GPIO_Init+0x32c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d037      	beq.n	80017fe <HAL_GPIO_Init+0x23e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a57      	ldr	r2, [pc, #348]	@ (80018f0 <HAL_GPIO_Init+0x330>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d031      	beq.n	80017fa <HAL_GPIO_Init+0x23a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a56      	ldr	r2, [pc, #344]	@ (80018f4 <HAL_GPIO_Init+0x334>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d02b      	beq.n	80017f6 <HAL_GPIO_Init+0x236>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a55      	ldr	r2, [pc, #340]	@ (80018f8 <HAL_GPIO_Init+0x338>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d025      	beq.n	80017f2 <HAL_GPIO_Init+0x232>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a54      	ldr	r2, [pc, #336]	@ (80018fc <HAL_GPIO_Init+0x33c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_GPIO_Init+0x22e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a53      	ldr	r2, [pc, #332]	@ (8001900 <HAL_GPIO_Init+0x340>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x22a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a52      	ldr	r2, [pc, #328]	@ (8001904 <HAL_GPIO_Init+0x344>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x226>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a51      	ldr	r2, [pc, #324]	@ (8001908 <HAL_GPIO_Init+0x348>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x222>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a50      	ldr	r2, [pc, #320]	@ (800190c <HAL_GPIO_Init+0x34c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x21e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001910 <HAL_GPIO_Init+0x350>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x21a>
 80017d6:	2309      	movs	r3, #9
 80017d8:	e012      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017da:	230a      	movs	r3, #10
 80017dc:	e010      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017de:	2308      	movs	r3, #8
 80017e0:	e00e      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00c      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e00a      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017ea:	2305      	movs	r3, #5
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001810:	4935      	ldr	r1, [pc, #212]	@ (80018e8 <HAL_GPIO_Init+0x328>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181e:	4b3d      	ldr	r3, [pc, #244]	@ (8001914 <HAL_GPIO_Init+0x354>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001842:	4a34      	ldr	r2, [pc, #208]	@ (8001914 <HAL_GPIO_Init+0x354>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001848:	4b32      	ldr	r3, [pc, #200]	@ (8001914 <HAL_GPIO_Init+0x354>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800186c:	4a29      	ldr	r2, [pc, #164]	@ (8001914 <HAL_GPIO_Init+0x354>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001872:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <HAL_GPIO_Init+0x354>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001896:	4a1f      	ldr	r2, [pc, #124]	@ (8001914 <HAL_GPIO_Init+0x354>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <HAL_GPIO_Init+0x354>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <HAL_GPIO_Init+0x354>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f ae84 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40021400 	.word	0x40021400
 8001904:	40021800 	.word	0x40021800
 8001908:	40021c00 	.word	0x40021c00
 800190c:	40022000 	.word	0x40022000
 8001910:	40022400 	.word	0x40022400
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af02      	add	r7, sp, #8
 8001950:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e101      	b.n	8001b60 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff f8b8 	bl	8000aec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2203      	movs	r2, #3
 8001980:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800198a:	d102      	bne.n	8001992 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f001 f8a6 	bl	8002ae8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7c1a      	ldrb	r2, [r3, #16]
 80019a4:	f88d 2000 	strb.w	r2, [sp]
 80019a8:	3304      	adds	r3, #4
 80019aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ac:	f001 f838 	bl	8002a20 <USB_CoreInit>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2202      	movs	r2, #2
 80019ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0ce      	b.n	8001b60 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 f89e 	bl	8002b0a <USB_SetCurrentMode>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0bf      	b.n	8001b60 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e04a      	b.n	8001a7c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	3315      	adds	r3, #21
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3314      	adds	r3, #20
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	b298      	uxth	r0, r3
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	332e      	adds	r3, #46	@ 0x2e
 8001a22:	4602      	mov	r2, r0
 8001a24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	3318      	adds	r3, #24
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	331c      	adds	r3, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3320      	adds	r3, #32
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	3324      	adds	r3, #36	@ 0x24
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	791b      	ldrb	r3, [r3, #4]
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3af      	bcc.n	80019e6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e044      	b.n	8001b16 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	3301      	adds	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d3b5      	bcc.n	8001a8c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7c1a      	ldrb	r2, [r3, #16]
 8001b28:	f88d 2000 	strb.w	r2, [sp]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b30:	f001 f838 	bl	8002ba4 <USB_DevInit>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00c      	b.n	8001b60 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fa00 	bl	8002f5e <USB_DevDisconnect>

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e267      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d075      	beq.n	8001c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b86:	4b88      	ldr	r3, [pc, #544]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d00c      	beq.n	8001bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	4b85      	ldr	r3, [pc, #532]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d112      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b82      	ldr	r3, [pc, #520]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001baa:	d10b      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	4b7e      	ldr	r3, [pc, #504]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d05b      	beq.n	8001c70 <HAL_RCC_OscConfig+0x108>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d157      	bne.n	8001c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e242      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x74>
 8001bce:	4b76      	ldr	r3, [pc, #472]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x98>
 8001be6:	4b70      	ldr	r3, [pc, #448]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6f      	ldr	r2, [pc, #444]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6c      	ldr	r2, [pc, #432]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001c00:	4b69      	ldr	r3, [pc, #420]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a68      	ldr	r2, [pc, #416]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a65      	ldr	r2, [pc, #404]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f890 	bl	8000d44 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff f88c 	bl	8000d44 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e207      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0xc0>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff f87c 	bl	8000d44 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff f878 	bl	8000d44 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1f3      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	4b51      	ldr	r3, [pc, #324]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0xe8>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d11c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b44      	ldr	r3, [pc, #272]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	4b41      	ldr	r3, [pc, #260]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e1c7      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b3b      	ldr	r3, [pc, #236]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4937      	ldr	r1, [pc, #220]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e03a      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <HAL_RCC_OscConfig+0x244>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff f831 	bl	8000d44 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f82d 	bl	8000d44 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1a8      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4925      	ldr	r1, [pc, #148]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <HAL_RCC_OscConfig+0x244>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f810 	bl	8000d44 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff f80c 	bl	8000d44 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e187      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d016      	beq.n	8001d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_RCC_OscConfig+0x248>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7fe fff0 	bl	8000d44 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7fe ffec 	bl	8000d44 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e167      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x200>
 8001d86:	e01b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_RCC_OscConfig+0x248>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe ffd9 	bl	8000d44 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	e00e      	b.n	8001db4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d96:	f7fe ffd5 	bl	8000d44 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d907      	bls.n	8001db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e150      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	42470000 	.word	0x42470000
 8001db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b88      	ldr	r3, [pc, #544]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ea      	bne.n	8001d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8097 	beq.w	8001efc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b81      	ldr	r3, [pc, #516]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b77      	ldr	r3, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b74      	ldr	r3, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a73      	ldr	r2, [pc, #460]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7fe ff95 	bl	8000d44 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7fe ff91 	bl	8000d44 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e10c      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_OscConfig+0x474>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2ea>
 8001e44:	4b64      	ldr	r3, [pc, #400]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a63      	ldr	r2, [pc, #396]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x324>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x30c>
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e66:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0x324>
 8001e74:	4b58      	ldr	r3, [pc, #352]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a57      	ldr	r2, [pc, #348]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e80:	4b55      	ldr	r3, [pc, #340]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e84:	4a54      	ldr	r2, [pc, #336]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001e86:	f023 0304 	bic.w	r3, r3, #4
 8001e8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d015      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe ff56 	bl	8000d44 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7fe ff52 	bl	8000d44 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0cb      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	4b49      	ldr	r3, [pc, #292]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0ee      	beq.n	8001e9c <HAL_RCC_OscConfig+0x334>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe ff40 	bl	8000d44 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ff3c 	bl	8000d44 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e0b5      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b39      	ldr	r3, [pc, #228]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	4a38      	ldr	r2, [pc, #224]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a1 	beq.w	8002048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f06:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d05c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d141      	bne.n	8001f9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe ff10 	bl	8000d44 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe ff0c 	bl	8000d44 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e087      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	4b27      	ldr	r3, [pc, #156]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	491b      	ldr	r1, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe fee5 	bl	8000d44 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe fee1 	bl	8000d44 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e05c      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x416>
 8001f9c:	e054      	b.n	8002048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <HAL_RCC_OscConfig+0x478>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fece 	bl	8000d44 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe feca 	bl	8000d44 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e045      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x444>
 8001fca:	e03d      	b.n	8002048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e038      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x4ec>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d028      	beq.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d121      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d11a      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002014:	4013      	ands	r3, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800201a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0cc      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b68      	ldr	r3, [pc, #416]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d90c      	bls.n	8002094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b65      	ldr	r3, [pc, #404]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b63      	ldr	r3, [pc, #396]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b8      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a58      	ldr	r2, [pc, #352]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a52      	ldr	r2, [pc, #328]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b50      	ldr	r3, [pc, #320]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494d      	ldr	r1, [pc, #308]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b3f      	ldr	r3, [pc, #252]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e067      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4934      	ldr	r1, [pc, #208]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe fdfc 	bl	8000d44 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe fdf8 	bl	8000d44 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e032      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4916      	ldr	r1, [pc, #88]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490e      	ldr	r1, [pc, #56]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f821 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	490a      	ldr	r1, [pc, #40]	@ (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	4a09      	ldr	r2, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fd5c 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00
 8002214:	40023800 	.word	0x40023800
 8002218:	08003090 	.word	0x08003090
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002228:	b094      	sub	sp, #80	@ 0x50
 800222a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002230:	2300      	movs	r3, #0
 8002232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002234:	2300      	movs	r3, #0
 8002236:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800223c:	4b79      	ldr	r3, [pc, #484]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d00d      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x40>
 8002248:	2b08      	cmp	r3, #8
 800224a:	f200 80e1 	bhi.w	8002410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x34>
 8002252:	2b04      	cmp	r3, #4
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x3a>
 8002256:	e0db      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b73      	ldr	r3, [pc, #460]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x204>)
 800225a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800225c:	e0db      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225e:	4b73      	ldr	r3, [pc, #460]	@ (800242c <HAL_RCC_GetSysClockFreq+0x208>)
 8002260:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002262:	e0d8      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002264:	4b6f      	ldr	r3, [pc, #444]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800226c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226e:	4b6d      	ldr	r3, [pc, #436]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b6a      	ldr	r3, [pc, #424]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	2200      	movs	r2, #0
 8002282:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002284:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228c:	633b      	str	r3, [r7, #48]	@ 0x30
 800228e:	2300      	movs	r3, #0
 8002290:	637b      	str	r3, [r7, #52]	@ 0x34
 8002292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002296:	4622      	mov	r2, r4
 8002298:	462b      	mov	r3, r5
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a8:	0150      	lsls	r0, r2, #5
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4621      	mov	r1, r4
 80022b0:	1a51      	subs	r1, r2, r1
 80022b2:	6139      	str	r1, [r7, #16]
 80022b4:	4629      	mov	r1, r5
 80022b6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022c8:	4659      	mov	r1, fp
 80022ca:	018b      	lsls	r3, r1, #6
 80022cc:	4651      	mov	r1, sl
 80022ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d2:	4651      	mov	r1, sl
 80022d4:	018a      	lsls	r2, r1, #6
 80022d6:	4651      	mov	r1, sl
 80022d8:	ebb2 0801 	subs.w	r8, r2, r1
 80022dc:	4659      	mov	r1, fp
 80022de:	eb63 0901 	sbc.w	r9, r3, r1
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f6:	4690      	mov	r8, r2
 80022f8:	4699      	mov	r9, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	eb18 0303 	adds.w	r3, r8, r3
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	462b      	mov	r3, r5
 8002304:	eb49 0303 	adc.w	r3, r9, r3
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002316:	4629      	mov	r1, r5
 8002318:	024b      	lsls	r3, r1, #9
 800231a:	4621      	mov	r1, r4
 800231c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002320:	4621      	mov	r1, r4
 8002322:	024a      	lsls	r2, r1, #9
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800232a:	2200      	movs	r2, #0
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002334:	f7fd ff5a 	bl	80001ec <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4613      	mov	r3, r2
 800233e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002340:	e058      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002342:	4b38      	ldr	r3, [pc, #224]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	2200      	movs	r2, #0
 800234a:	4618      	mov	r0, r3
 800234c:	4611      	mov	r1, r2
 800234e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
 8002358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800235c:	4642      	mov	r2, r8
 800235e:	464b      	mov	r3, r9
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	0159      	lsls	r1, r3, #5
 800236a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800236e:	0150      	lsls	r0, r2, #5
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4641      	mov	r1, r8
 8002376:	ebb2 0a01 	subs.w	sl, r2, r1
 800237a:	4649      	mov	r1, r9
 800237c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800238c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002394:	ebb2 040a 	subs.w	r4, r2, sl
 8002398:	eb63 050b 	sbc.w	r5, r3, fp
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	00eb      	lsls	r3, r5, #3
 80023a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023aa:	00e2      	lsls	r2, r4, #3
 80023ac:	4614      	mov	r4, r2
 80023ae:	461d      	mov	r5, r3
 80023b0:	4643      	mov	r3, r8
 80023b2:	18e3      	adds	r3, r4, r3
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	464b      	mov	r3, r9
 80023b8:	eb45 0303 	adc.w	r3, r5, r3
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ca:	4629      	mov	r1, r5
 80023cc:	028b      	lsls	r3, r1, #10
 80023ce:	4621      	mov	r1, r4
 80023d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023d4:	4621      	mov	r1, r4
 80023d6:	028a      	lsls	r2, r1, #10
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023de:	2200      	movs	r2, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	61fa      	str	r2, [r7, #28]
 80023e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e8:	f7fd ff00 	bl	80001ec <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4613      	mov	r3, r2
 80023f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240e:	e002      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x204>)
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002418:	4618      	mov	r0, r3
 800241a:	3750      	adds	r7, #80	@ 0x50
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200

08002430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_RCC_GetHCLKFreq+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800244c:	f7ff fff0 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a9b      	lsrs	r3, r3, #10
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4903      	ldr	r1, [pc, #12]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	080030a0 	.word	0x080030a0

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002474:	f7ff ffdc 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0b5b      	lsrs	r3, r3, #13
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4903      	ldr	r1, [pc, #12]	@ (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	080030a0 	.word	0x080030a0

08002498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e042      	b.n	8002530 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe facc 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	@ 0x24
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f82b 	bl	8002538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800253c:	b0c0      	sub	sp, #256	@ 0x100
 800253e:	af00      	add	r7, sp, #0
 8002540:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002554:	68d9      	ldr	r1, [r3, #12]
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	ea40 0301 	orr.w	r3, r0, r1
 8002560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	431a      	orrs	r2, r3
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	431a      	orrs	r2, r3
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002590:	f021 010c 	bic.w	r1, r1, #12
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800259e:	430b      	orrs	r3, r1
 80025a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b2:	6999      	ldr	r1, [r3, #24]
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	ea40 0301 	orr.w	r3, r0, r1
 80025be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002804 <UART_SetConfig+0x2cc>)
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d005      	beq.n	80025d8 <UART_SetConfig+0xa0>
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002808 <UART_SetConfig+0x2d0>)
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d104      	bne.n	80025e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025d8:	f7ff ff4a 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 80025dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025e0:	e003      	b.n	80025ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025e2:	f7ff ff31 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 80025e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025f4:	f040 810c 	bne.w	8002810 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025fc:	2200      	movs	r2, #0
 80025fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002602:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002606:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800260a:	4622      	mov	r2, r4
 800260c:	462b      	mov	r3, r5
 800260e:	1891      	adds	r1, r2, r2
 8002610:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002612:	415b      	adcs	r3, r3
 8002614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800261a:	4621      	mov	r1, r4
 800261c:	eb12 0801 	adds.w	r8, r2, r1
 8002620:	4629      	mov	r1, r5
 8002622:	eb43 0901 	adc.w	r9, r3, r1
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800263a:	4690      	mov	r8, r2
 800263c:	4699      	mov	r9, r3
 800263e:	4623      	mov	r3, r4
 8002640:	eb18 0303 	adds.w	r3, r8, r3
 8002644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002648:	462b      	mov	r3, r5
 800264a:	eb49 0303 	adc.w	r3, r9, r3
 800264e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800265e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002666:	460b      	mov	r3, r1
 8002668:	18db      	adds	r3, r3, r3
 800266a:	653b      	str	r3, [r7, #80]	@ 0x50
 800266c:	4613      	mov	r3, r2
 800266e:	eb42 0303 	adc.w	r3, r2, r3
 8002672:	657b      	str	r3, [r7, #84]	@ 0x54
 8002674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800267c:	f7fd fdb6 	bl	80001ec <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4b61      	ldr	r3, [pc, #388]	@ (800280c <UART_SetConfig+0x2d4>)
 8002686:	fba3 2302 	umull	r2, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	011c      	lsls	r4, r3, #4
 800268e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002698:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800269c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026a0:	4642      	mov	r2, r8
 80026a2:	464b      	mov	r3, r9
 80026a4:	1891      	adds	r1, r2, r2
 80026a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026a8:	415b      	adcs	r3, r3
 80026aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026b0:	4641      	mov	r1, r8
 80026b2:	eb12 0a01 	adds.w	sl, r2, r1
 80026b6:	4649      	mov	r1, r9
 80026b8:	eb43 0b01 	adc.w	fp, r3, r1
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026d0:	4692      	mov	sl, r2
 80026d2:	469b      	mov	fp, r3
 80026d4:	4643      	mov	r3, r8
 80026d6:	eb1a 0303 	adds.w	r3, sl, r3
 80026da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026de:	464b      	mov	r3, r9
 80026e0:	eb4b 0303 	adc.w	r3, fp, r3
 80026e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80026fc:	460b      	mov	r3, r1
 80026fe:	18db      	adds	r3, r3, r3
 8002700:	643b      	str	r3, [r7, #64]	@ 0x40
 8002702:	4613      	mov	r3, r2
 8002704:	eb42 0303 	adc.w	r3, r2, r3
 8002708:	647b      	str	r3, [r7, #68]	@ 0x44
 800270a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800270e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002712:	f7fd fd6b 	bl	80001ec <__aeabi_uldivmod>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4611      	mov	r1, r2
 800271c:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <UART_SetConfig+0x2d4>)
 800271e:	fba3 2301 	umull	r2, r3, r3, r1
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2264      	movs	r2, #100	@ 0x64
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	1acb      	subs	r3, r1, r3
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002732:	4b36      	ldr	r3, [pc, #216]	@ (800280c <UART_SetConfig+0x2d4>)
 8002734:	fba3 2302 	umull	r2, r3, r3, r2
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002740:	441c      	add	r4, r3
 8002742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800274c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002750:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	1891      	adds	r1, r2, r2
 800275a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800275c:	415b      	adcs	r3, r3
 800275e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002764:	4641      	mov	r1, r8
 8002766:	1851      	adds	r1, r2, r1
 8002768:	6339      	str	r1, [r7, #48]	@ 0x30
 800276a:	4649      	mov	r1, r9
 800276c:	414b      	adcs	r3, r1
 800276e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800277c:	4659      	mov	r1, fp
 800277e:	00cb      	lsls	r3, r1, #3
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002786:	4651      	mov	r1, sl
 8002788:	00ca      	lsls	r2, r1, #3
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	4603      	mov	r3, r0
 8002790:	4642      	mov	r2, r8
 8002792:	189b      	adds	r3, r3, r2
 8002794:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002798:	464b      	mov	r3, r9
 800279a:	460a      	mov	r2, r1
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80027b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80027b8:	460b      	mov	r3, r1
 80027ba:	18db      	adds	r3, r3, r3
 80027bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027be:	4613      	mov	r3, r2
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027ce:	f7fd fd0d 	bl	80001ec <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <UART_SetConfig+0x2d4>)
 80027d8:	fba3 1302 	umull	r1, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	2164      	movs	r1, #100	@ 0x64
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	3332      	adds	r3, #50	@ 0x32
 80027ea:	4a08      	ldr	r2, [pc, #32]	@ (800280c <UART_SetConfig+0x2d4>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	f003 0207 	and.w	r2, r3, #7
 80027f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4422      	add	r2, r4
 80027fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002800:	e106      	b.n	8002a10 <UART_SetConfig+0x4d8>
 8002802:	bf00      	nop
 8002804:	40011000 	.word	0x40011000
 8002808:	40011400 	.word	0x40011400
 800280c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002814:	2200      	movs	r2, #0
 8002816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800281a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800281e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002822:	4642      	mov	r2, r8
 8002824:	464b      	mov	r3, r9
 8002826:	1891      	adds	r1, r2, r2
 8002828:	6239      	str	r1, [r7, #32]
 800282a:	415b      	adcs	r3, r3
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
 800282e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002832:	4641      	mov	r1, r8
 8002834:	1854      	adds	r4, r2, r1
 8002836:	4649      	mov	r1, r9
 8002838:	eb43 0501 	adc.w	r5, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	00eb      	lsls	r3, r5, #3
 8002846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284a:	00e2      	lsls	r2, r4, #3
 800284c:	4614      	mov	r4, r2
 800284e:	461d      	mov	r5, r3
 8002850:	4643      	mov	r3, r8
 8002852:	18e3      	adds	r3, r4, r3
 8002854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002858:	464b      	mov	r3, r9
 800285a:	eb45 0303 	adc.w	r3, r5, r3
 800285e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800286e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800287e:	4629      	mov	r1, r5
 8002880:	008b      	lsls	r3, r1, #2
 8002882:	4621      	mov	r1, r4
 8002884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002888:	4621      	mov	r1, r4
 800288a:	008a      	lsls	r2, r1, #2
 800288c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002890:	f7fd fcac 	bl	80001ec <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4b60      	ldr	r3, [pc, #384]	@ (8002a1c <UART_SetConfig+0x4e4>)
 800289a:	fba3 2302 	umull	r2, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	011c      	lsls	r4, r3, #4
 80028a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80028b4:	4642      	mov	r2, r8
 80028b6:	464b      	mov	r3, r9
 80028b8:	1891      	adds	r1, r2, r2
 80028ba:	61b9      	str	r1, [r7, #24]
 80028bc:	415b      	adcs	r3, r3
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c4:	4641      	mov	r1, r8
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	6139      	str	r1, [r7, #16]
 80028ca:	4649      	mov	r1, r9
 80028cc:	414b      	adcs	r3, r1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028dc:	4659      	mov	r1, fp
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	4651      	mov	r1, sl
 80028e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e6:	4651      	mov	r1, sl
 80028e8:	00ca      	lsls	r2, r1, #3
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4642      	mov	r2, r8
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028f8:	464b      	mov	r3, r9
 80028fa:	460a      	mov	r2, r1
 80028fc:	eb42 0303 	adc.w	r3, r2, r3
 8002900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800290e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800291c:	4649      	mov	r1, r9
 800291e:	008b      	lsls	r3, r1, #2
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002926:	4641      	mov	r1, r8
 8002928:	008a      	lsls	r2, r1, #2
 800292a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800292e:	f7fd fc5d 	bl	80001ec <__aeabi_uldivmod>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4611      	mov	r1, r2
 8002938:	4b38      	ldr	r3, [pc, #224]	@ (8002a1c <UART_SetConfig+0x4e4>)
 800293a:	fba3 2301 	umull	r2, r3, r3, r1
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2264      	movs	r2, #100	@ 0x64
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	1acb      	subs	r3, r1, r3
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	3332      	adds	r3, #50	@ 0x32
 800294c:	4a33      	ldr	r2, [pc, #204]	@ (8002a1c <UART_SetConfig+0x4e4>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002958:	441c      	add	r4, r3
 800295a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800295e:	2200      	movs	r2, #0
 8002960:	673b      	str	r3, [r7, #112]	@ 0x70
 8002962:	677a      	str	r2, [r7, #116]	@ 0x74
 8002964:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002968:	4642      	mov	r2, r8
 800296a:	464b      	mov	r3, r9
 800296c:	1891      	adds	r1, r2, r2
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	415b      	adcs	r3, r3
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002978:	4641      	mov	r1, r8
 800297a:	1851      	adds	r1, r2, r1
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	4649      	mov	r1, r9
 8002980:	414b      	adcs	r3, r1
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002990:	4659      	mov	r1, fp
 8002992:	00cb      	lsls	r3, r1, #3
 8002994:	4651      	mov	r1, sl
 8002996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800299a:	4651      	mov	r1, sl
 800299c:	00ca      	lsls	r2, r1, #3
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	4642      	mov	r2, r8
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029aa:	464b      	mov	r3, r9
 80029ac:	460a      	mov	r2, r1
 80029ae:	eb42 0303 	adc.w	r3, r2, r3
 80029b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80029be:	667a      	str	r2, [r7, #100]	@ 0x64
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029cc:	4649      	mov	r1, r9
 80029ce:	008b      	lsls	r3, r1, #2
 80029d0:	4641      	mov	r1, r8
 80029d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d6:	4641      	mov	r1, r8
 80029d8:	008a      	lsls	r2, r1, #2
 80029da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029de:	f7fd fc05 	bl	80001ec <__aeabi_uldivmod>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <UART_SetConfig+0x4e4>)
 80029e8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	2164      	movs	r1, #100	@ 0x64
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	3332      	adds	r3, #50	@ 0x32
 80029fa:	4a08      	ldr	r2, [pc, #32]	@ (8002a1c <UART_SetConfig+0x4e4>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4422      	add	r2, r4
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a16:	46bd      	mov	sp, r7
 8002a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1c:	51eb851f 	.word	0x51eb851f

08002a20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a20:	b084      	sub	sp, #16
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	f107 001c 	add.w	r0, r7, #28
 8002a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a32:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d123      	bne.n	8002a82 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 faa0 	bl	8002fbc <USB_CoreReset>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	e01b      	b.n	8002aba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa94 	bl	8002fbc <USB_CoreReset>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8002aac:	e005      	b.n	8002aba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002aba:	7fbb      	ldrb	r3, [r7, #30]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10b      	bne.n	8002ad8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f043 0206 	orr.w	r2, r3, #6
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ae4:	b004      	add	sp, #16
 8002ae6:	4770      	bx	lr

08002ae8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 0201 	bic.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d115      	bne.n	8002b58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002b38:	200a      	movs	r0, #10
 8002b3a:	f7fe f90f 	bl	8000d5c <HAL_Delay>
      ms += 10U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	330a      	adds	r3, #10
 8002b42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fa2b 	bl	8002fa0 <USB_GetMode>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d01e      	beq.n	8002b8e <USB_SetCurrentMode+0x84>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b54:	d9f0      	bls.n	8002b38 <USB_SetCurrentMode+0x2e>
 8002b56:	e01a      	b.n	8002b8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002b6a:	200a      	movs	r0, #10
 8002b6c:	f7fe f8f6 	bl	8000d5c <HAL_Delay>
      ms += 10U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	330a      	adds	r3, #10
 8002b74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa12 	bl	8002fa0 <USB_GetMode>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <USB_SetCurrentMode+0x84>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b86:	d9f0      	bls.n	8002b6a <USB_SetCurrentMode+0x60>
 8002b88:	e001      	b.n	8002b8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e005      	b.n	8002b9a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b92:	d101      	bne.n	8002b98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	e009      	b.n	8002bd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	3340      	adds	r3, #64	@ 0x40
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b0e      	cmp	r3, #14
 8002bdc:	d9f2      	bls.n	8002bc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002bde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11c      	bne.n	8002c20 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c1e:	e00b      	b.n	8002c38 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c24:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2300      	movs	r3, #0
 8002c42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10d      	bne.n	8002c68 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002c54:	2100      	movs	r1, #0
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f968 	bl	8002f2c <USB_SetDevSpeed>
 8002c5c:	e008      	b.n	8002c70 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c5e:	2101      	movs	r1, #1
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f963 	bl	8002f2c <USB_SetDevSpeed>
 8002c66:	e003      	b.n	8002c70 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c68:	2103      	movs	r1, #3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f95e 	bl	8002f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002c70:	2110      	movs	r1, #16
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f8fa 	bl	8002e6c <USB_FlushTxFifo>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f924 	bl	8002ed0 <USB_FlushRxFifo>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	e043      	b.n	8002d44 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cd2:	d118      	bne.n	8002d06 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e013      	b.n	8002d18 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	e008      	b.n	8002d18 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d12:	461a      	mov	r2, r3
 8002d14:	2300      	movs	r3, #0
 8002d16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d24:	461a      	mov	r2, r3
 8002d26:	2300      	movs	r3, #0
 8002d28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d36:	461a      	mov	r2, r3
 8002d38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	3301      	adds	r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d48:	461a      	mov	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d3b5      	bcc.n	8002cbc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	e043      	b.n	8002dde <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d6c:	d118      	bne.n	8002da0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e013      	b.n	8002db2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d96:	461a      	mov	r2, r3
 8002d98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e008      	b.n	8002db2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dac:	461a      	mov	r2, r3
 8002dae:	2300      	movs	r3, #0
 8002db0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002de2:	461a      	mov	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d3b5      	bcc.n	8002d56 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dfc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002e0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f043 0210 	orr.w	r2, r3, #16
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <USB_DevInit+0x2c4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f043 0208 	orr.w	r2, r3, #8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002e40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d107      	bne.n	8002e58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e64:	b004      	add	sp, #16
 8002e66:	4770      	bx	lr
 8002e68:	803c3800 	.word	0x803c3800

08002e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e86:	d901      	bls.n	8002e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e01b      	b.n	8002ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	daf2      	bge.n	8002e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	019b      	lsls	r3, r3, #6
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002eb0:	d901      	bls.n	8002eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e006      	b.n	8002ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d0f0      	beq.n	8002ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ee8:	d901      	bls.n	8002eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e018      	b.n	8002f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	daf2      	bge.n	8002edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2210      	movs	r2, #16
 8002efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f0c:	d901      	bls.n	8002f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e006      	b.n	8002f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d0f0      	beq.n	8002f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8002f78:	f023 0303 	bic.w	r3, r3, #3
 8002f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0301 	and.w	r3, r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002fd4:	d901      	bls.n	8002fda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e01b      	b.n	8003012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	daf2      	bge.n	8002fc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ffe:	d901      	bls.n	8003004 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e006      	b.n	8003012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d0f0      	beq.n	8002ff2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <memset>:
 800301e:	4402      	add	r2, r0
 8003020:	4603      	mov	r3, r0
 8003022:	4293      	cmp	r3, r2
 8003024:	d100      	bne.n	8003028 <memset+0xa>
 8003026:	4770      	bx	lr
 8003028:	f803 1b01 	strb.w	r1, [r3], #1
 800302c:	e7f9      	b.n	8003022 <memset+0x4>
	...

08003030 <__libc_init_array>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	4d0d      	ldr	r5, [pc, #52]	@ (8003068 <__libc_init_array+0x38>)
 8003034:	4c0d      	ldr	r4, [pc, #52]	@ (800306c <__libc_init_array+0x3c>)
 8003036:	1b64      	subs	r4, r4, r5
 8003038:	10a4      	asrs	r4, r4, #2
 800303a:	2600      	movs	r6, #0
 800303c:	42a6      	cmp	r6, r4
 800303e:	d109      	bne.n	8003054 <__libc_init_array+0x24>
 8003040:	4d0b      	ldr	r5, [pc, #44]	@ (8003070 <__libc_init_array+0x40>)
 8003042:	4c0c      	ldr	r4, [pc, #48]	@ (8003074 <__libc_init_array+0x44>)
 8003044:	f000 f818 	bl	8003078 <_init>
 8003048:	1b64      	subs	r4, r4, r5
 800304a:	10a4      	asrs	r4, r4, #2
 800304c:	2600      	movs	r6, #0
 800304e:	42a6      	cmp	r6, r4
 8003050:	d105      	bne.n	800305e <__libc_init_array+0x2e>
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	f855 3b04 	ldr.w	r3, [r5], #4
 8003058:	4798      	blx	r3
 800305a:	3601      	adds	r6, #1
 800305c:	e7ee      	b.n	800303c <__libc_init_array+0xc>
 800305e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003062:	4798      	blx	r3
 8003064:	3601      	adds	r6, #1
 8003066:	e7f2      	b.n	800304e <__libc_init_array+0x1e>
 8003068:	080030b0 	.word	0x080030b0
 800306c:	080030b0 	.word	0x080030b0
 8003070:	080030b0 	.word	0x080030b0
 8003074:	080030b4 	.word	0x080030b4

08003078 <_init>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr

08003084 <_fini>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr
